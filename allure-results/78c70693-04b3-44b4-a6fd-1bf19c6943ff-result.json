{"status": "broken", "description": "\n    SWPBL-108779: Player Should Not Send Authorization Header To Non-secure Cloud Queue Endpoints\n    If the CQ endpoint is insecure (http), the player should not set the Authorization header in the media request.\n    :param ws_client:\n    :param mock_cq_control\n    :return:\n    ", "parameters": [{"name": "track", "value": "'0'"}, {"name": "library_path", "value": "''"}, {"name": "proto", "value": "'https'"}], "labels": [{"name": "tag", "value": "nightly"}, {"name": "tag", "value": "priority3"}, {"name": "tag", "value": "SFB_EM1_2020"}, {"name": "tag", "value": "cloudqueue"}, {"name": "parentSuite", "value": "player.muse"}, {"name": "suite", "value": "test_cloudqueue_misc"}, {"name": "host", "value": "258a64477ad8"}, {"name": "thread", "value": "1-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "player.muse.test_cloudqueue_misc"}], "stop": 1683575493206, "uuid": "7da094af-da25-4c1d-97ff-1940137d730b", "historyId": "9135b7d516cb2b58a8d7dc99049b4be5", "name": "test_load_cloud_queue_auth_header[Secured CQ Server]", "start": 1683575492197, "fullName": "player.muse.test_cloudqueue_misc#test_load_cloud_queue_auth_header[Secured CQ Server]", "statusDetails": {"message": "error: [Errno 104] Connection reset by peer", "trace": ">       lambda: ihook(item=item, **kwds),\n        when=when,\n    )\n\n../../../.venv/local/lib/python2.7/site-packages/flaky/flaky_pytest_plugin.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.venv/local/lib/python2.7/site-packages/allure_commons/_allure.py:169: in __call__\n    return self._fixture_function(*args, **kwargs)\nplayer/muse/conftest.py:136: in set_hosts_override\n    dut_manager.zp.cli.command(\"echo '{}' > /etc/hosts\".format(ETC_HOSTS))\n../../../.venv/local/lib/python2.7/site-packages/sonos/client/call_tracker.py:132: in _decorator\n    return func(self, *args, **kwargs)\n../../../.venv/local/lib/python2.7/site-packages/sonos/client/cli/ssh.py:239: in command\n    cmd_response = self._ssh_client.command(cmd, **ssh_client_kwargs)\n../../../.venv/local/lib/python2.7/site-packages/sonos/test/util/ssh_client.py:255: in command\n    retry=False, append_stderr=append_stderr)\n../../../.venv/local/lib/python2.7/site-packages/sonos/test/util/ssh_client.py:236: in command\n    cmd_with_path, timeout=timeout)\n../../../.venv/local/lib/python2.7/site-packages/paramiko/client.py:508: in exec_command\n    chan = self._transport.open_session(timeout=timeout)\n../../../.venv/local/lib/python2.7/site-packages/paramiko/transport.py:879: in open_session\n    timeout=timeout,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <paramiko.Transport at 0x55a93190L (unconnected)>, kind = 'session'\ndest_addr = None, src_addr = None, window_size = 2097152\nmax_packet_size = 32768, timeout = 120\n\n    def open_channel(\n        self,\n        kind,\n        dest_addr=None,\n        src_addr=None,\n        window_size=None,\n        max_packet_size=None,\n        timeout=None,\n    ):\n        \"\"\"\n        Request a new channel to the server. `Channels <.Channel>` are\n        socket-like objects used for the actual transfer of data across the\n        session. You may only request a channel after negotiating encryption\n        (using `connect` or `start_client`) and authenticating.\n    \n        .. note:: Modifying the the window and packet sizes might have adverse\n            effects on the channel created. The default values are the same\n            as in the OpenSSH code base and have been battle tested.\n    \n        :param str kind:\n            the kind of channel requested (usually ``\"session\"``,\n            ``\"forwarded-tcpip\"``, ``\"direct-tcpip\"``, or ``\"x11\"``)\n        :param tuple dest_addr:\n            the destination address (address + port tuple) of this port\n            forwarding, if ``kind`` is ``\"forwarded-tcpip\"`` or\n            ``\"direct-tcpip\"`` (ignored for other channel types)\n        :param src_addr: the source address of this port forwarding, if\n            ``kind`` is ``\"forwarded-tcpip\"``, ``\"direct-tcpip\"``, or ``\"x11\"``\n        :param int window_size:\n            optional window size for this session.\n        :param int max_packet_size:\n            optional max packet size for this session.\n        :param float timeout:\n            optional timeout opening a channel, default 3600s (1h)\n    \n        :return: a new `.Channel` on success\n    \n        :raises:\n            `.SSHException` -- if the request is rejected, the session ends\n            prematurely or there is a timeout openning a channel\n    \n        .. versionchanged:: 1.15\n            Added the ``window_size`` and ``max_packet_size`` arguments.\n        \"\"\"\n        if not self.active:\n            raise SSHException(\"SSH session not active\")\n        timeout = 3600 if timeout is None else timeout\n        self.lock.acquire()\n        try:\n            window_size = self._sanitize_window_size(window_size)\n            max_packet_size = self._sanitize_packet_size(max_packet_size)\n            chanid = self._next_channel()\n            m = Message()\n            m.add_byte(cMSG_CHANNEL_OPEN)\n            m.add_string(kind)\n            m.add_int(chanid)\n            m.add_int(window_size)\n            m.add_int(max_packet_size)\n            if (kind == \"forwarded-tcpip\") or (kind == \"direct-tcpip\"):\n                m.add_string(dest_addr[0])\n                m.add_int(dest_addr[1])\n                m.add_string(src_addr[0])\n                m.add_int(src_addr[1])\n            elif kind == \"x11\":\n                m.add_string(src_addr[0])\n                m.add_int(src_addr[1])\n            chan = Channel(chanid)\n            self._channels.put(chanid, chan)\n            self.channel_events[chanid] = event = threading.Event()\n            self.channels_seen[chanid] = True\n            chan._set_transport(self)\n            chan._set_window(window_size, max_packet_size)\n        finally:\n            self.lock.release()\n        self._send_user_message(m)\n        start_ts = time.time()\n        while True:\n            event.wait(0.1)\n            if not self.active:\n                e = self.get_exception()\n                if e is None:\n                    e = SSHException(\"Unable to open channel.\")\n>               raise e\nE               error: [Errno 104] Connection reset by peer\n\n../../../.venv/local/lib/python2.7/site-packages/paramiko/transport.py:1006: error"}, "attachments": [{"source": "16394efb-2e1a-426e-9057-18c519fd3b5a-attachment.txt", "type": "text/plain", "name": "stderr"}]}