"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"skipped","Fri Apr 21 20:03:00 GMT 2023","Fri Apr 21 20:03:00 GMT 2023","70","player.muse","test_audioClip_namespace","","","","test_audio_clip_ACTIVE_change_volume_success[default audioclip setting]","
    Test to verify volume buttons work as expected when
    an audioClip is in ACTIVE state
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param set_initial_volume:
    :return:
    "
"passed","Fri Apr 21 20:03:51 GMT 2023","Fri Apr 21 20:03:54 GMT 2023","3012","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_httpAuthorization_truncated_to_512_bytes[511_BYTES-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl and LONG_HTTP_AUTH truncates
    the httpAuthorization param received by the mock to 512 bytes
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:02:14 GMT 2023","Fri Apr 21 20:02:16 GMT 2023","2009","player.muse","test_audioClip_namespace","","","","test_audio_clip_HTTPS_streamUrl_auth[httpAuth = None-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl (proto = HTTPS) with
    and without httpAuthorization and verify httpAuthorization is sent to mock CQ server
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param verify_http_authorization: verify actual and expect httpAuth
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[True-False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GC_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:05:34 GMT 2023","Fri Apr 21 20:05:34 GMT 2023","1","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_avt_queue_PLAYING[clipBehavior = [None]]","
    On a standalone ZP with media content - AVT Queue (Playback State PLAYING),
    verify loadAudioClip with empty clipBehavior:
    1. pauses media content before audio clip is ACTIVE
    2. resumes media content after audio clip is DONE
    Note: If selected device is mixing incapable, expect the device in test to pause playback
    because mixing limitation on incapable devices due to processor limitations.
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param module_dut:
    :param clipBehavior: clipBehavior array
    :return:
    "
"passed","Fri Apr 21 20:00:58 GMT 2023","Fri Apr 21 20:00:59 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_audio_clip_error_invalid_clipType[clipType = INVALID]","
    Test to verify loadAudioClip command with different priorities,
    INVALID clipType returns INVALID_OBJECT_ID error
    :param ws_client:
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :return:
    "
"passed","Fri Apr 21 20:02:50 GMT 2023","Fri Apr 21 20:02:52 GMT 2023","2008","player.muse","test_audioClip_namespace","","","","test_audio_clip_status_ACTIVE_DONE[default audioclip setting]","
    Test to verify loadAudioClip command returns ACTIVE followed by DONE status
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:00:42 GMT 2023","Fri Apr 21 20:00:46 GMT 2023","3655","player.muse","test_audioClip_namespace","","","","test_audio_clip_success_with_track_and_no_CQ_playback[ogg track clip source-default audioclip setting]","
    Test to verify loadAudioClip command with different priorities,
    clipType with streamUrl followed by cancelAudioClip command
    without any CQ playback and verify volume is unchanged
    after audioClip commands
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Fri Apr 21 20:05:06 GMT 2023","Fri Apr 21 20:05:06 GMT 2023","73","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_with_pause_content_over_spdif_playback[SPDIF Capable DUT]","
    SWPBL-143086
    Verify that playing an audioClip that forces content pause over a spdif stream doesn't return an error and that
    the spdif stream does stop and resume.
    :param function_dut:
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GM_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Fri Apr 21 20:02:42 GMT 2023","Fri Apr 21 20:02:43 GMT 2023","1004","player.muse","test_audioClip_namespace","","","","test_audio_clip_status_ERROR[streamUrl = INVLAID.mp3]","
    Test to verify loadAudioClip command with INVALID streamUrl
    returns ERROR status
    :param ws_client:
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GC_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:05:24 GMT 2023","Fri Apr 21 20:05:24 GMT 2023","1","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_shared_queue_PAUSED[clipBehavior = [None]]","
    On a standalone ZP with media content (Playback State PAUSED),
    verify loadAudioClip with empty clipBehavior:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param clipBehavior: clipBehavior array
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GM_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Fri Apr 21 20:00:30 GMT 2023","Fri Apr 21 20:00:32 GMT 2023","2008","player.muse","test_audioClip_namespace","","","","test_audio_clip_success_with_track_and_no_CQ_playback[Short tracks clip source-default audioclip setting]","
    Test to verify loadAudioClip command with different priorities,
    clipType with streamUrl followed by cancelAudioClip command
    without any CQ playback and verify volume is unchanged
    after audioClip commands
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:01:45 GMT 2023","Fri Apr 21 20:01:47 GMT 2023","2011","player.muse","test_audioClip_namespace","","","","test_audio_clip_HTTPS_streamUrl_auth[httpAuth = DEFAULT_HTTP_AUTHORIZATION-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl (proto = HTTPS) with
    and without httpAuthorization and verify httpAuthorization is sent to mock CQ server
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param verify_http_authorization: verify actual and expect httpAuth
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:02:34 GMT 2023","Fri Apr 21 20:02:35 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_audio_clip_error_invalid_param_with_HTTP_streamUrl_with_httpAuthorization[httpAuth = DEFAULT_HTTP_AUTHORIZATION]","
    Test to verify loadAudioClip command with HTTP streamUrl with httpAuthorization
    returns INVALID_PARAM and httpAuthorization is sent to mock CQ server
    :param ws_client:
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :return:
    "
"skipped","Fri Apr 21 20:01:26 GMT 2023","Fri Apr 21 20:01:26 GMT 2023","1","player.muse","test_audioClip_namespace","","","","test_overlapping_loadAudioClip_cmd_succeeds_and_cancelAudioClip_on_prior_id_fails[default audioclip setting]","
    Test to verify first loadAudioClip command followed by second loadAudioClip
    command both succeed, cancelAudioClip for first id fails and cancelAudioClip
    for second id succeeds
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:00:51 GMT 2023","Fri Apr 21 20:00:52 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_audio_clip_error_missing_streamUrl_with_CUSTOM_clipType[streamUrl = """"]","
    Test to verify loadAudioClip command with different priorities,
    CUSTOM clipType without streamUrl returns MISSING_PARAM error
    :param ws_client:
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GC_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:05:46 GMT 2023","Fri Apr 21 20:05:46 GMT 2023","1","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_private_queue_PLAYING[clipBehavior = [None]]","
    On a standalone ZP with media content - Private Queue (Playback State PLAYING),
    verify loadAudioClip with empty clipBehavior:
    1. pauses media content before audio clip is ACTIVE
    2. resumes media content after audio clip is DONE
    Note: If selected device is mixing incapable, expect the device in test to pause playback
    because mixing limitation on incapable devices due to processor limitations.
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param module_dut:
    :param clipBehavior: clipBehavior array
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[False-True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:05:29 GMT 2023","Fri Apr 21 20:05:29 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_no_playback[clipBehavior = [None]]","
    On a standalone ZP with no media content (Playback State IDLE),
    verify loadAudioClip with empty clipBehavior:
    1. retains IDLE state before audio clip is ACTIVE
    2. retains IDLE state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param clipBehavior: clipBehavior array
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[True-True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GM_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:05:15 GMT 2023","Fri Apr 21 20:05:15 GMT 2023","69","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_shared_queue_PLAYING[clipBehavior = [None]]","
    On a standalone ZP with media content (Playback State PLAYING),
    verify loadAudioClip with empty clipBehavior:
    1. does not pause media content before audio clip is ACTIVE
       (media content is ducked, audio clip is mixed)
    2. resumes media content after audio clip is DONE
       (media content un-ducked)
    Note: If selected device is mixing incapable, expect the device in test to pause playback
    because mixing limitation on incapable devices due to processor limitations.
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param clipBehavior: clipBehavior array
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GM_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Fri Apr 21 20:05:54 GMT 2023","Fri Apr 21 20:06:02 GMT 2023","7433","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_bonded_to_sub_plays_audioclips_over_avt_with_PLAY_TO_BONDED[clipBehavior = [PLAY_TO_BONDED]]","
    On a standalone device bonded to a sub,
    verify loadAudioClip targeted to primary ZP with PLAY_TO_BONDED:
    1. emits PLAYING playback state when audio clip is active
    2. emits IDLE playback state when audio clip is done
    plays audio clip on both the primary and secondary ZPs
    Additionally verify avt uri is not the same as before audioClip started playing
    NOTE: Originally ZP+Sub would play AudioClips with PLAY_TO_BONDED over ExternalAudioSrc.
          This test ensures AudioClips are played using AVT.
    :param ws_client:
    :param function_dut:
    :param clipBehavior: clipBehavior array
    :param dut_manager:
    :return:
    "
"skipped","Fri Apr 21 20:01:15 GMT 2023","Fri Apr 21 20:01:15 GMT 2023","73","player.muse","test_audioClip_namespace","","","","test_audio_clip_success_with_track_and_CQ_playback[default audioclip setting]","
    Test to verify loadAudioClip command with different priorities,
    clipType with streamUrl followed by cancelAudioClip command
    with CQ playback and verify CQ playback resumes
    after audioClip commands
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:04:51 GMT 2023","Fri Apr 21 20:04:54 GMT 2023","3012","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_httpAuthorization_truncated_to_512_bytes[520_BYTES-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl and LONG_HTTP_AUTH truncates
    the httpAuthorization param received by the mock to 512 bytes
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:04:20 GMT 2023","Fri Apr 21 20:04:23 GMT 2023","3010","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_httpAuthorization_truncated_to_512_bytes[512_BYTES-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl and LONG_HTTP_AUTH truncates
    the httpAuthorization param received by the mock to 512 bytes
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GC_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Fri Apr 21 20:03:33 GMT 2023","Fri Apr 21 20:03:33 GMT 2023","1","player.muse","test_audioClip_namespace","","","","test_audioClip_rest[default audioclip setting]","
    Verfies audio clip load/cancel happy path via REST

    :param ws_client:
    :param streamUrl:
    :param audioclip_status_queue:
    :return:
    "
"skipped","Fri Apr 21 20:06:11 GMT 2023","Fri Apr 21 20:06:11 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[False-False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Fri Apr 21 20:03:07 GMT 2023","Fri Apr 21 20:03:27 GMT 2023","20120","player.muse","test_audioClip_namespace","","","","test_audio_clip_status_on_concurrent_ws_connections[default audioclip setting]","
    Test to verify subscribe and unsubscribe audioClip commands on
    multiple websocket connections
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Fri Apr 21 20:01:02 GMT 2023","Fri Apr 21 20:01:03 GMT 2023","1002","player.muse","test_audioClip_namespace","","","","test_cancelAudioClip_with_invalid_id","
    Test to verify cancelAudioClip with an INVALID_ID
    :param ws_client:
    :return:
    "
