"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Thu Apr 20 22:06:48 GMT 2023","Thu Apr 20 22:07:04 GMT 2023","16218","player.muse","test_muse_metric_logging","","","","test_config_download_failure[Default Mock Config]","

    :param module_dut:
    :param mock_cq_control:
    :param mock_player_services_control:
    :return:
    "
"passed","Thu Apr 20 22:14:59 GMT 2023","Thu Apr 20 22:15:36 GMT 2023","36911","player.muse","test_muse_metric_logging","","","","test_location_id_reported[Default Mock Config]","
    SWPBL-199720
    Verify that the new locationId field is reported in metrics events
    :param module_dut: The device under test
    :param mock_player_services_control: A mock lechmere instance used for setting the locationID
    :param mock_cq_server: A mock for gathering metrics events for verification
    "
"passed","Thu Apr 20 22:09:39 GMT 2023","Thu Apr 20 22:10:11 GMT 2023","32193","player.muse","test_muse_metric_logging","","","","test_upnp_notifications[countEventsSuccess]","
    SWPBL-196372: New automation to test UPnP aggregated notifications telemetry event with all expected fields. (success and
    fail test) and verifies aggregated count of events.

    :param dut_manager:
    :param module_dut:
    :param mock_cq_server:
    :param ws_client:
    :param telemetry_path:
    :return:
    "
"passed","Thu Apr 20 22:12:50 GMT 2023","Thu Apr 20 22:14:12 GMT 2023","82416","player.muse","test_muse_metric_logging","","","","test_upnpeventhealth_no_flooding","
    Automated test for SWPBL-198251: Change Upnp telemetry to report every 10 minutes
    1. Make sure upnpEventHealth is not reported on subscribe/renew/unsubscribe
    2. Verify that upnpEventHealth is reported on hitting the testpoint and forcing event upload
    #curl --data ""{}"" ""http://<ip_addr>:1400/testpoint?name=upnptelemetry""

    :param module_dut:
    :param ws_client:
    :param mock_cq_server:
    :return:
    "
"skipped","Thu Apr 20 22:07:33 GMT 2023","Thu Apr 20 22:07:33 GMT 2023","0","player.muse","test_muse_metric_logging","","","","test_muse_upnp_tunneled","
    SWPBL-182835: Verifies usageMetrics log has the associated upnp method nested in ""events"" when sending a tunneled
    muse-upnp command.
    :param ws_client:
    :param module_dut:
    :param mock_cq_server:
    :return:
    "
"passed","Thu Apr 20 22:04:24 GMT 2023","Thu Apr 20 22:05:58 GMT 2023","94343","player.muse","test_muse_metric_logging","","","","test_event_reporting[Default Mock Config]","

    :param module_dut:
    :param mock_cq_control:
    :param mock_player_services_control:
    :param ws_client:
    :return:
    "
"passed","Thu Apr 20 22:07:32 GMT 2023","Thu Apr 20 22:07:32 GMT 2023","639","player.muse","test_muse_metric_logging","","","","test_config_download_metrics_service_success[Metrics Config URL]","
    Verifies metric config file can be successfully downloaded from the live Metrics Config service
    SWPBL-133386
    :param module_dut:
    :return:
    "
"passed","Thu Apr 20 22:10:52 GMT 2023","Thu Apr 20 22:11:08 GMT 2023","16294","player.muse","test_muse_metric_logging","","","","test_insecure_oauth_fail_telemetry[http responseStatus 401-Default Mock Config]","
    SWPBL-195116: This tests if INSECURE V1 muse commands sent over REST with HH_CONFIG_ADMIN scope send telemetry when
    authorized and unauthorized.
    :param module_dut:
    :param mock_cq_server:
    :param mock_player_services_control
    :param mock_hh_config_admin_oauth_token
    :param authorization
    :return:
    "
"passed","Thu Apr 20 22:08:05 GMT 2023","Thu Apr 20 22:08:41 GMT 2023","36348","player.muse","test_muse_metric_logging","","","","test_upnp_notifications[countEventsFailure]","
    SWPBL-196372: New automation to test UPnP aggregated notifications telemetry event with all expected fields. (success and
    fail test) and verifies aggregated count of events.

    :param dut_manager:
    :param module_dut:
    :param mock_cq_server:
    :param ws_client:
    :param telemetry_path:
    :return:
    "
"passed","Thu Apr 20 22:11:48 GMT 2023","Thu Apr 20 22:12:04 GMT 2023","16302","player.muse","test_muse_metric_logging","","","","test_insecure_oauth_fail_telemetry[http responseStatus 200-Default Mock Config]","
    SWPBL-195116: This tests if INSECURE V1 muse commands sent over REST with HH_CONFIG_ADMIN scope send telemetry when
    authorized and unauthorized.
    :param module_dut:
    :param mock_cq_server:
    :param mock_player_services_control
    :param mock_hh_config_admin_oauth_token
    :param authorization
    :return:
    "
"skipped","Thu Apr 20 22:07:33 GMT 2023","Thu Apr 20 22:07:33 GMT 2023","0","player.muse","test_muse_metric_logging","","","","test_muse_client_metrics_events","
    SWPBL-171330: For this test we are not fussed about the data within the muse client commands metrics, but more
    so that the metric shows up at all. For that reason, I've only verified the command name shows up as expected
    within the data. Furthermore, we are only testing one client ""museClientEntitlementsCommands"" since they are all
    generated and should behave the same.
    :param module_dut:
    :param cloudqueue_metrics:
    :return:
    "
