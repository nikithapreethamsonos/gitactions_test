"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Tue May 02 18:23:39 GMT 2023","Tue May 02 18:23:40 GMT 2023","1002","player.muse","test_shared_muse_logic","","","","test_bad_header_params[no command]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 17:57:53 GMT 2023","Tue May 02 17:57:56 GMT 2023","3012","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_httpAuthorization_truncated_to_512_bytes[512_BYTES-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl and LONG_HTTP_AUTH truncates
    the httpAuthorization param received by the mock to 512 bytes
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 17:59:52 GMT 2023","Tue May 02 17:59:58 GMT 2023","6137","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_private_queue_PLAYING[clipBehavior = [None]]","
    On a standalone ZP with media content - Private Queue (Playback State PLAYING),
    verify loadAudioClip with empty clipBehavior:
    1. pauses media content before audio clip is ACTIVE
    2. resumes media content after audio clip is DONE
    Note: If selected device is mixing incapable, expect the device in test to pause playback
    because mixing limitation on incapable devices due to processor limitations.
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param module_dut:
    :param clipBehavior: clipBehavior array
    :return:
    "
"passed","Tue May 02 18:19:53 GMT 2023","Tue May 02 18:19:56 GMT 2023","3557","player.muse","test_basic_formatting","","","","test_bad_body[No Closing Brace]","
    Test that malformed bodies throw an error
    :param module_dut:
    :param ws_client_v2:
    :param body: The malformed body to send
    "
"passed","Tue May 02 18:29:25 GMT 2023","Tue May 02 18:30:47 GMT 2023","82415","player.muse","test_muse_metric_logging","","","","test_upnpeventhealth_no_flooding","
    Automated test for SWPBL-198251: Change Upnp telemetry to report every 10 minutes
    1. Make sure upnpEventHealth is not reported on subscribe/renew/unsubscribe
    2. Verify that upnpEventHealth is reported on hitting the testpoint and forcing event upload
    #curl --data ""{}"" ""http://<ip_addr>:1400/testpoint?name=upnptelemetry""

    :param module_dut:
    :param ws_client:
    :param mock_cq_server:
    :return:
    "
"passed","Tue May 02 17:57:02 GMT 2023","Tue May 02 17:57:07 GMT 2023","5207","player.muse","test_playbackMetadata_namespace","","","","test_rateItem_204_304_rating_response[304]","
    A 204/304 response should not change the queue. Verifies that the player transitions to the next track
    "
"passed","Tue May 02 18:25:31 GMT 2023","Tue May 02 18:25:33 GMT 2023","2050","player.muse","test_groups_namespace","","","","test_creating_groups_with_invalid_playerIds_failure[device_filter0]","
    Test to verify grouping cmds with invalid playerIds return INVALID_PARAM error along with
    invalid playerIds in playerIds array
    :param ws_client:
    :param function_dut:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-CONSUMER-CQ server 401 resp]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 17:49:05 GMT 2023","Tue May 02 17:49:15 GMT 2023","10232","player.muse","test_upnp_namespace","","","","test_subscribe_renew_async_events","
    Last updated for SWPBL-144492
    Verify the test client receives async events from a sub'ed upnp namespace.
    Verify that renew continues a short lived sub.
    :param module_dut:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 17:57:00 GMT 2023","Tue May 02 17:57:00 GMT 2023","1","player.muse","test_audioClip_namespace","","","","test_audioClip_rest[default audioclip setting]","
    Verfies audio clip load/cancel happy path via REST

    :param ws_client:
    :param streamUrl:
    :param audioclip_status_queue:
    :return:
    "
"passed","Tue May 02 18:25:06 GMT 2023","Tue May 02 18:25:08 GMT 2023","2077","player.muse","test_groupVolume_namespace","","","","test_set_relative_volume_clamp_max","
    This test uses a volumeDelta that is currently out of range to verify
    the player clamps audio at 100.

    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:48:54 GMT 2023","Tue May 02 17:48:56 GMT 2023","2145","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpSystemProperties]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"passed","Tue May 02 18:20:33 GMT 2023","Tue May 02 18:20:33 GMT 2023","49","player.muse","test_basic_formatting","","","","test_bad_gid","
    Ensure that REST calls with a wrong group id fail.
    :param module_dut:
    "
"passed","Tue May 02 18:36:40 GMT 2023","Tue May 02 18:36:57 GMT 2023","17066","player.muse","test_saved_groups","","","","test_saved_groups_using_zp_which_is_gc_of_group_with_different_playerId","
    Verify grouping using a zp acting as the group coordinator of a group with a groupId different than
    the zp's playerId does not add the unintentional zp(the one from the groupId) in the group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:55:44 GMT 2023","Tue May 02 17:55:56 GMT 2023","12204","player.muse","test_homeTheater_namespace","","","","test_loadHomeTheaterPlayback_on_ht_master_devices_while_idle","
    Verify that the player enters TV playback mode and stays there after no activity
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:56:25 GMT 2023","Tue May 02 17:56:30 GMT 2023","5043","player.muse","test_homeTheater_namespace","","","","test_homeTheater_namespace_options[nightMode]","
    Verify that a muse client can get and set the nightMode option on home theater devices.
    :param module_dut:
    :param ws_client:
    :param test_input:
    :return:
    "
"skipped","Tue May 02 17:58:36 GMT 2023","Tue May 02 17:58:36 GMT 2023","69","player.muse","test_playback_namespace","","","","test_loadLineIn_on_linein_and_non_linein_zps[True-device_filter0]","
    Verify the loadLineIn commands works as expected on linein and non-linein ZPs
    :param ws_client:
    :param function_dut:
    :param explicit_deviceId:
    :return:
    "
"passed","Tue May 02 18:22:21 GMT 2023","Tue May 02 18:22:21 GMT 2023","424","player.muse","test_platformInternal_namespace","","","","test_invalidateCache_bad_cache_name","
    SWPBL-153417
    Verify that an invalid cache name does not cause any changes to the httpcaches file
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GM_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:48:47 GMT 2023","Tue May 02 17:48:50 GMT 2023","2274","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpRenderingControl]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-CONSUMER-CQ server 202 resp]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"skipped","Tue May 02 17:50:16 GMT 2023","Tue May 02 17:50:16 GMT 2023","0","player.muse","test_upnp_namespace","","","","test_upnp_subscribe_load[TLS Cached]","
    SWPBL-196285 and SWPBL-195363
    Repeatedly take down UPnP subscriptions, and stand them back up using a testpoint. Take CPU and memory measurements of the testbed.
    This is to gauge how much additional resources are utilized by TLS secured UPnP.
    :param dut_manager:
    :flush_tls_cache: Flushing the tls cache will cause much more resources to be used, as each connection the full handshake will need to occur
    :return:
    "
"passed","Tue May 02 17:47:00 GMT 2023","Tue May 02 17:47:00 GMT 2023","78","player.muse","test_muse_mdns","","","","test_muse_mdns_enabled","
    Verify we can see the muse mdns advert enabled for a ZP that supports Muse mDNS
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:58:28 GMT 2023","Tue May 02 17:58:33 GMT 2023","5448","player.muse","test_playbackSession_namespace","","","","test_load_play_verify_metadata","
    SWPBL-146353
    Verify that muse sessions created via muse V2 REST stay valid and can be used to play music.

    :param ws_client:
    :param mock_cq_server:
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:56:12 GMT 2023","Tue May 02 17:56:15 GMT 2023","3050","player.muse","test_homeTheater_namespace","","","","test_loadHomeTheaterPlayback_on_ht_master_devices_while_playing_cq","
    Start playing CQ media and verify player transitions to TV playback after a HT load
    :param module_dut:
    :param ws_client:
    :param mock_cq_server:
    :return:
    "
"skipped","Tue May 02 18:25:46 GMT 2023","Tue May 02 18:25:46 GMT 2023","1","player.muse","test_groups_namespace","","","","test_capability_from_response_on_supported_devices[device_filter1-unsupported_devices1-AIRPLAY]","
    Test getGroups response from supported_device and verify it
    - advertises CAPABILITY on supported_zp
    - does not advertise CAPABILITY on unsupported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param capability:
    :param unsupported_devices:
    :return:
    "
"passed","Tue May 02 18:28:07 GMT 2023","Tue May 02 18:28:16 GMT 2023","8378","player.muse","test_groups_namespace","","","","test_playback_state_using_createGroup_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using createGroup and
    group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"skipped","Tue May 02 17:59:27 GMT 2023","Tue May 02 17:59:27 GMT 2023","0","player.muse","test_playback_namespace","","","","test_loadContainer_local_share[Play specific m3u playlist]","
    SWPBL-145583
    Verify loadContainer works with local library files via the following methods:
    1. an entire samba share
    2. a specific artist
    3. a specific playlist
    :param module_dut:
    :param md_type:
    :return:
    "
"passed","Tue May 02 18:24:25 GMT 2023","Tue May 02 18:25:02 GMT 2023","36539","player.muse","test_muse_metric_logging","","","","test_upnp_notifications[countEventsFailure]","
    SWPBL-196372: New automation to test UPnP aggregated notifications telemetry event with all expected fields. (success and
    fail test) and verifies aggregated count of events.

    :param dut_manager:
    :param module_dut:
    :param mock_cq_server:
    :param ws_client:
    :param telemetry_path:
    :return:
    "
"skipped","Tue May 02 17:48:39 GMT 2023","Tue May 02 17:48:39 GMT 2023","1","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Disabled-locationID Set-Muse HHID Set]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"passed","Tue May 02 18:24:53 GMT 2023","Tue May 02 18:24:55 GMT 2023","2074","player.muse","test_groupVolume_namespace","","","","test_set_volume","
    Test set volume

    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:25:59 GMT 2023","Tue May 02 18:26:00 GMT 2023","1005","player.muse","test_groups_namespace","","","","test_secondary_devices_not_enabled_by_default[device_filter0]","
    SWPBL-110826
    Verifies that the devices array is NOT shown by default for a getGroups call
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:59:29 GMT 2023","Tue May 02 17:59:30 GMT 2023","1179","player.muse","test_playback_namespace","","","","test_play_feedback_on_empty_queue[True-device_filter0]","
    SWPBL-169195
    Verify that when the deviceFeedback parameter is used with the play command a bloop is played if the queue is empty
    :param function_dut:
    :param feedback: determines whether to tell the play command to flash the LED and ""bloop""
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GC_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:49:00 GMT 2023","Tue May 02 17:49:02 GMT 2023","2144","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpZoneGroupTopology]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"passed","Tue May 02 18:26:10 GMT 2023","Tue May 02 18:26:19 GMT 2023","8774","player.muse","test_groups_namespace","","","","test_playback_state_using_modifyGroup_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using modifyGroup and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 18:20:23 GMT 2023","Tue May 02 18:20:24 GMT 2023","1054","player.muse","test_basic_formatting","","","","test_unsupported_namespace","
    Ensure that non-existant namespaces throw errors.
    :param module_dut:
    :param ws_client_v2:
    "
"passed","Tue May 02 18:28:31 GMT 2023","Tue May 02 18:28:39 GMT 2023","8204","player.muse","test_groups_namespace","","","","test_playback_state_using_setGroup_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using setGroup and group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 17:49:36 GMT 2023","Tue May 02 17:49:36 GMT 2023","46","player.muse","test_upnp_namespace","","","","test_upnpQueue_removeAllTracks_REST","
    SWPBL-178404
    Verify that the RemoveAllTracks UPnP command can be successfully called via the REST interface
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:46:19 GMT 2023","Tue May 02 17:46:21 GMT 2023","2200","player.muse","test_info_namespace","","","","test_getInfo[AIRPLAY Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:55:54 GMT 2023","Tue May 02 17:55:55 GMT 2023","1007","player.muse","test_cloudqueue_misc","","","","test_load_cloud_queue_auth_header[Non-secured CQ Server]","
    SWPBL-108779: Player Should Not Send Authorization Header To Non-secure Cloud Queue Endpoints
    If the CQ endpoint is insecure (http), the player should not set the Authorization header in the media request.
    :param ws_client:
    :param mock_cq_control
    :return:
    "
"skipped","Tue May 02 18:30:22 GMT 2023","Tue May 02 18:30:22 GMT 2023","0","player.muse","test_groups_namespace","","","","test_getGroups_failure_pre_grouping[device_filter0]","
    Verifies that a createGroup call will fail PRE grouping with inconsistent topology. Puts a ZP in an inconsistent
    state by overriding the groupID(both advertise themselves to be the same group)
    which makes the topology consistency check mark it as invalid.
    SWPBL-130705
    :param websocket_manager:
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-CONSUMER-CQ Server off]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 18:32:36 GMT 2023","Tue May 02 18:32:48 GMT 2023","12176","player.muse","test_saved_groups","","","","test_saved_groups_setGroupMembers_with_empty_playerIds_and_areaIds","
    Verify setGroupMembers call with empty playerIds and areaIds on a group
    with non-empty areaIds and playerIds breaks apart the targeted group and clears areaIds
    and does not interfere with other groups in the HH
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:57:16 GMT 2023","Tue May 02 17:57:22 GMT 2023","6290","player.muse","test_playbackMetadata_namespace","","","","test_rateItem_404_rating_response","
    A 404 response should clear the queue on the player. Verifies that the player is IDLE and it sent out a proper error event.
    "
"skipped","Tue May 02 17:50:16 GMT 2023","Tue May 02 17:50:16 GMT 2023","0","player.muse","test_upnp_namespace","","","","test_upnp_subscribe_load[TLS Flushed]","
    SWPBL-196285 and SWPBL-195363
    Repeatedly take down UPnP subscriptions, and stand them back up using a testpoint. Take CPU and memory measurements of the testbed.
    This is to gauge how much additional resources are utilized by TLS secured UPnP.
    :param dut_manager:
    :flush_tls_cache: Flushing the tls cache will cause much more resources to be used, as each connection the full handshake will need to occur
    :return:
    "
"passed","Tue May 02 18:23:27 GMT 2023","Tue May 02 18:23:59 GMT 2023","32019","player.muse","test_muse_playReport","","","","test_playReport_avt_queue","
    Verifies playReport events for the AVT queue have a valid apiKey UUID value
    :param ws_client:
    :param mock_cq_control:
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:24:01 GMT 2023","Tue May 02 18:24:02 GMT 2023","1003","player.muse","test_shared_muse_logic","","","","test_bad_header_params[bad command]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 18:24:46 GMT 2023","Tue May 02 18:24:47 GMT 2023","1003","player.muse","test_shared_muse_logic","","","","test_invalid_oauth_token[lower scope]","
    SWPBL-93702, SWPBL-93706
    Verify that we can pass a bad or improperly scoped oauth token and it is rejected
    on the player
    :param ws_client:
    :param oauth_token:
    :return:
    "
"passed","Tue May 02 17:46:36 GMT 2023","Tue May 02 17:46:37 GMT 2023","1071","cloud.lechmere","test_mock_lechmere_connections","","","","test_get_config[Default Mock Config]","
    Verify the player behaves correctly when receiving a getConfig message (06) over the websocket.

    :param module_dut:
    :param mock_player_services_control:
    "
"skipped","Tue May 02 18:30:22 GMT 2023","Tue May 02 18:30:22 GMT 2023","0","player.muse","test_groups_namespace","","","","test_getGroups_failure_post_grouping[device_filter1-gm]","
    Verifies that a createGroup call will fail POST grouping with inconsistent topology. Puts both a GC and a GM in an
    inconsistent state by overriding the groupID which makes the topology consistency check mark it as invalid.
    SWPBL-130705
    :param websocket_manager:
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param group_makeup:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 18:26:08 GMT 2023","Tue May 02 18:26:40 GMT 2023","32201","player.muse","test_muse_metric_logging","","","","test_upnp_notifications[countEventsSuccess]","
    SWPBL-196372: New automation to test UPnP aggregated notifications telemetry event with all expected fields. (success and
    fail test) and verifies aggregated count of events.

    :param dut_manager:
    :param module_dut:
    :param mock_cq_server:
    :param ws_client:
    :param telemetry_path:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[True-False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:55:17 GMT 2023","Tue May 02 17:55:19 GMT 2023","2009","player.muse","test_audioClip_namespace","","","","test_audio_clip_HTTPS_streamUrl_auth[httpAuth = DEFAULT_HTTP_AUTHORIZATION-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl (proto = HTTPS) with
    and without httpAuthorization and verify httpAuthorization is sent to mock CQ server
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param verify_http_authorization: verify actual and expect httpAuth
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 18:24:13 GMT 2023","Tue May 02 18:24:16 GMT 2023","3004","player.muse","test_shared_muse_logic","","","","test_bad_header_params_v2[no householdId]","
    Negative test sends empty values for some possible header keys and verifies the correct error is thrown
    :param ws_client_v2:
    :param param:
    :param error:
    :return:
    "
"passed","Tue May 02 18:30:24 GMT 2023","Tue May 02 18:30:24 GMT 2023","660","player.muse","test_groups_namespace","","","","test_createGroup_duplicated_playerId[device_filter0]","
    Verify that createGroup tests for duplicate entries in the playerId array and sends out an accurate error event.
    "
"passed","Tue May 02 18:00:05 GMT 2023","Tue May 02 18:00:12 GMT 2023","7240","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_bonded_to_sub_plays_audioclips_over_avt_with_PLAY_TO_BONDED[clipBehavior = [PLAY_TO_BONDED]]","
    On a standalone device bonded to a sub,
    verify loadAudioClip targeted to primary ZP with PLAY_TO_BONDED:
    1. emits PLAYING playback state when audio clip is active
    2. emits IDLE playback state when audio clip is done
    plays audio clip on both the primary and secondary ZPs
    Additionally verify avt uri is not the same as before audioClip started playing
    NOTE: Originally ZP+Sub would play AudioClips with PLAY_TO_BONDED over ExternalAudioSrc.
          This test ensures AudioClips are played using AVT.
    :param ws_client:
    :param function_dut:
    :param clipBehavior: clipBehavior array
    :param dut_manager:
    :return:
    "
"passed","Tue May 02 18:21:16 GMT 2023","Tue May 02 18:21:26 GMT 2023","10477","player.muse","test_global_namespace","","","","test_GroupCoordinatorChangedEvent_websocketUrl_v1","
    Creates a group and verifies the WS URL in a getGroups response for grouped players has the correct format
    Breaks apart the group and verifies that the WS URL in GroupCoordinatorChangedEvent has the correct format
    MUSE implementation note:
    websocketUrl (optional) - Only included if groupStatus is GROUP_STATUS_MOVED.
    Reflects the WebSocket URL of the player that is the new coordinator for the group
    SWPBL-89976
    :param websocket_manager:
    :param dut_manager:
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:26:29 GMT 2023","Tue May 02 18:26:38 GMT 2023","9681","player.muse","test_groups_namespace","","","","test_playback_state_using_createGroup_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using createGroup and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"skipped","Tue May 02 18:30:22 GMT 2023","Tue May 02 18:30:22 GMT 2023","0","player.muse","test_groups_namespace","","","","test_getGroups_failure_post_grouping[device_filter0-gc]","
    Verifies that a createGroup call will fail POST grouping with inconsistent topology. Puts both a GC and a GM in an
    inconsistent state by overriding the groupID which makes the topology consistency check mark it as invalid.
    SWPBL-130705
    :param websocket_manager:
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param group_makeup:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 17:48:10 GMT 2023","Tue May 02 17:48:12 GMT 2023","2144","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpConnectionManager]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"skipped","Tue May 02 18:29:37 GMT 2023","Tue May 02 18:29:38 GMT 2023","1387","player.muse","test_groups_namespace","","","","test_grouping_correlation_id[PLAYBACK_DEVICES]","
    Verifies events generated from createGroup and modifyGroupMembers commands honor a passed in corrId and populate their
    corrId as the corrParentId on the generated events
    original corrId --> museCommandHandler corrParentId
    museCommandHandler corrId --> corrParentId generated events
    :param dut_manager:
    :param function_dut:
    :param mock_cq_control:
    :param ws_client:
    :param device_filter:
    :return:
    "
"passed","Tue May 02 18:20:57 GMT 2023","Tue May 02 18:21:03 GMT 2023","5534","player.muse","test_favorites_namespace","","","","test_load_favorite_track[Normal length tracks]","
    Verifies favoriting a track, and loading it.
    :param module_dut:
    :param ws_client:
    "
"skipped","Tue May 02 18:25:43 GMT 2023","Tue May 02 18:25:43 GMT 2023","71","player.muse","test_groups_namespace","","","","test_capability_from_response_on_supported_devices[device_filter0-unsupported_devices0-VOICE]","
    Test getGroups response from supported_device and verify it
    - advertises CAPABILITY on supported_zp
    - does not advertise CAPABILITY on unsupported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param capability:
    :param unsupported_devices:
    :return:
    "
"passed","Tue May 02 17:49:40 GMT 2023","Tue May 02 17:50:15 GMT 2023","35423","player.muse","test_upnp_namespace","","","","test_upnp_not_broadcast","
    SWPBL-190579
    Verify that UPNP events are not broadcast, each subscription should only see one event, it should not see the events for every subscriber.
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:57:39 GMT 2023","Tue May 02 17:57:40 GMT 2023","1276","player.muse","test_playbackMetadata_namespace","","","","test_rate_item_invalid_itemId_values[Bad Param]","
    Verify the player sends an error if the itemId is blank or null
    "
"passed","Tue May 02 18:20:01 GMT 2023","Tue May 02 18:20:02 GMT 2023","1044","player.muse","test_basic_formatting","","","","test_bad_body[No Opening Brace]","
    Test that malformed bodies throw an error
    :param module_dut:
    :param ws_client_v2:
    :param body: The malformed body to send
    "
"passed","Tue May 02 18:25:24 GMT 2023","Tue May 02 18:25:25 GMT 2023","1039","player.muse","test_groupVolume_namespace","","","","test_get_volume","
    Tests getVolume command

    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:25:17 GMT 2023","Tue May 02 18:25:28 GMT 2023","10914","player.muse","test_shared_muse_logic","","","","test_websocket_V1_empty_apiKey_rejected","
    SWPBL-144572 | Verify empty apiKey while opening a Muse WebSocket V1 connection results in a failure
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:35:46 GMT 2023","Tue May 02 18:36:12 GMT 2023","26837","player.muse","test_saved_groups","","","","test_saved_groups_inactive_players","
    Verify grouping using areaIds works as expected when a player is in an inactive state and
    areaIds filtering rules don't add areaId associated with a valid but inactive player
    by delegating the group coordinator and updates the playerIds and areaIds for the targeted group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:56:21 GMT 2023","Tue May 02 17:56:24 GMT 2023","2820","player.muse","test_playbackMetadata_namespace","","","","test_metadata_shows_ratings_object_on_pre_rate_track","
    Verify that the player is able to parse pre-rated tracks before playback has started
    "
"passed","Tue May 02 17:47:24 GMT 2023","Tue May 02 17:47:57 GMT 2023","32995","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Enabled-locationID Set-Muse HHID Set]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"passed","Tue May 02 18:24:47 GMT 2023","Tue May 02 18:25:10 GMT 2023","22586","player.muse","test_muse_playReport","","","","test_playReport_private_queue","
    Verifies playReport events for the private queue have a valid apiKey UUID value
    :param ws_client:
    :param mock_cq_control:
    :param module_dut:
    :param mock_cq_server:
    :return:
    "
"passed","Tue May 02 17:46:11 GMT 2023","Tue May 02 17:46:14 GMT 2023","3182","player.muse","test_info_namespace","","","","test_getInfo[AUDIO_CLIP Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 18:22:49 GMT 2023","Tue May 02 18:22:49 GMT 2023","72","player.muse","test_platformInternal_namespace","","","","test_invalidateCache_cacheNamespace[Without cacheData-Default Mock Config]","
    SWPBL-171354: Multiple Muse Caches
    Verify that the correct cache(s) are invalidated, and other caches left alone, when:
        1. Only the namespace is specified: All auth caches should be cleared
        2. A single cache within a namespace is specified: Only that cache is cleared
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GC_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:26:48 GMT 2023","Tue May 02 18:26:57 GMT 2023","8658","player.muse","test_groups_namespace","","","","test_playback_state_using_setGroup_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using setGroup and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"skipped","Tue May 02 18:22:53 GMT 2023","Tue May 02 18:22:53 GMT 2023","0","player.muse","test_platformInternal_namespace","","","","test_invalidateCache_cacheNamespace[With cacheData-Default Mock Config]","
    SWPBL-171354: Multiple Muse Caches
    Verify that the correct cache(s) are invalidated, and other caches left alone, when:
        1. Only the namespace is specified: All auth caches should be cleared
        2. A single cache within a namespace is specified: Only that cache is cleared
    "
"passed","Tue May 02 18:23:56 GMT 2023","Tue May 02 18:23:57 GMT 2023","1002","player.muse","test_shared_muse_logic","","","","test_bad_header_params[bad namespace]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 17:54:15 GMT 2023","Tue May 02 17:54:16 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_audio_clip_error_missing_streamUrl_with_CUSTOM_clipType[streamUrl = """"]","
    Test to verify loadAudioClip command with different priorities,
    CUSTOM clipType without streamUrl returns MISSING_PARAM error
    :param ws_client:
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :return:
    "
"passed","Tue May 02 17:53:56 GMT 2023","Tue May 02 17:53:58 GMT 2023","2009","player.muse","test_audioClip_namespace","","","","test_audio_clip_success_with_track_and_no_CQ_playback[Short tracks clip source-default audioclip setting]","
    Test to verify loadAudioClip command with different priorities,
    clipType with streamUrl followed by cancelAudioClip command
    without any CQ playback and verify volume is unchanged
    after audioClip commands
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 18:27:36 GMT 2023","Tue May 02 18:27:59 GMT 2023","23312","player.muse","test_muse_playReport","","","","test_playReport_shared_queue","
    Verifies playReport events for the shared queue have a valid apiKey UUID value
    :param mock_cq_control:
    :param http_mp3_server:
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:28:23 GMT 2023","Tue May 02 18:28:39 GMT 2023","16174","player.muse","test_muse_metric_logging","","","","test_insecure_oauth_fail_telemetry[http responseStatus 200-Default Mock Config]","
    SWPBL-195116: This tests if INSECURE V1 muse commands sent over REST with HH_CONFIG_ADMIN scope send telemetry when
    authorized and unauthorized.
    :param module_dut:
    :param mock_cq_server:
    :param mock_player_services_control
    :param mock_hh_config_admin_oauth_token
    :param authorization
    :return:
    "
"skipped","Tue May 02 17:58:51 GMT 2023","Tue May 02 17:58:51 GMT 2023","1","player.muse","test_playback_namespace","","","","test_loadLineIn_source_from_outside_and_inside_of_group[device_filter0]","
    Verify that loadLineIn will work with a source ZP that's in and out of the target groupId
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:25:50 GMT 2023","Tue May 02 18:25:51 GMT 2023","1161","player.muse","test_groups_namespace","","","","test_capability_from_response_on_unsupported_devices[device_filter0-supported_devices0-VOICE]","
    Test getGroups response from unsupported_device and verify it
    - does not advertise CAPABILITY on unsupported_zp
    - advertises CAPABILITY on supported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param supported_devices:
    :param capability:
    :return:
    "
"passed","Tue May 02 17:56:40 GMT 2023","Tue May 02 17:56:43 GMT 2023","2212","player.muse","test_playbackMetadata_namespace","","","","test_rate_item_200_negative_rating_late_track_in_queue","
    SWPBL-75253
    Verify that if the last track in the queue is deleted due to a bad rating, the player will pause on the new last track and not continue to play.
    "
"passed","Tue May 02 17:45:53 GMT 2023","Tue May 02 17:46:01 GMT 2023","8211","player.muse","test_info_namespace","","","","test_getInfo[VOICE Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 18:23:54 GMT 2023","Tue May 02 18:23:54 GMT 2023","0","player.muse","test_muse_metric_logging","","","","test_muse_client_metrics_events","
    SWPBL-171330: For this test we are not fussed about the data within the muse client commands metrics, but more
    so that the metric shows up at all. For that reason, I've only verified the command name shows up as expected
    within the data. Furthermore, we are only testing one client ""museClientEntitlementsCommands"" since they are all
    generated and should behave the same.
    :param module_dut:
    :param cloudqueue_metrics:
    :return:
    "
"passed","Tue May 02 17:59:04 GMT 2023","Tue May 02 17:59:11 GMT 2023","7620","player.muse","test_playback_namespace","","","","test_avtransport_playback_state_transition_on_togglePlayPause_while_idle_playing_paused_and_empty_avt","
    Perform a series of togglePlayPause commands and verify that the player AVTransport transitions as expected
    Transition 1: IDLE    -> PLAYING
    Transition 2: PLAYING -> PAUSED
    Transition 3: PAUSED  -> PLAYING

    Perform togglePlayPause command and verify that the player AVTransport playback throws ERROR_PLAYBACK_NO_CONTENT
    :param module_dut:
    :param ws_client:
    :param mock_cq_server:
    :return:
    "
"passed","Tue May 02 17:54:53 GMT 2023","Tue May 02 17:54:58 GMT 2023","5024","player.muse","test_audioClip_namespace","","","","test_overlapping_loadAudioClip_cmd_succeeds_and_cancelAudioClip_on_prior_id_fails[default audioclip setting]","
    Test to verify first loadAudioClip command followed by second loadAudioClip
    command both succeed, cancelAudioClip for first id fails and cancelAudioClip
    for second id succeeds
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 17:56:50 GMT 2023","Tue May 02 17:56:55 GMT 2023","5244","player.muse","test_playbackMetadata_namespace","","","","test_rateItem_204_304_rating_response[204]","
    A 204/304 response should not change the queue. Verifies that the player transitions to the next track
    "
"passed","Tue May 02 18:25:03 GMT 2023","Tue May 02 18:25:04 GMT 2023","1040","player.muse","test_shared_muse_logic","","","","test_set_volume[-1-False]","
    Verify a range of values work. Out of bounds on the high side generates error, oob low side clamps to 0
    SWPBL-105577 - We clamp all negative values to 0
    :param module_dut:
    :param ws_client:
    :param volume:
    :param muted:
    :return:
    "
"passed","Tue May 02 18:25:18 GMT 2023","Tue May 02 18:25:19 GMT 2023","1039","player.muse","test_groupVolume_namespace","","","","test_set_mute","
    Tests setMute command

    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:46:28 GMT 2023","Tue May 02 17:46:35 GMT 2023","7056","cloud.lechmere","test_mock_lechmere_connections","","","","test_player_resends_registration_message_on_reconnect[Default Mock Config]","
    Verify the player re-sends the registration message on reconnect.
    This covers the regression in SWPBL-58732.

    :param module_dut:
    :param mock_player_services_control:
    "
"passed","Tue May 02 18:23:10 GMT 2023","Tue May 02 18:23:27 GMT 2023","17149","player.muse","test_muse_metric_logging","","","","test_config_download_failure[Default Mock Config]","

    :param module_dut:
    :param mock_cq_control:
    :param mock_player_services_control:
    :return:
    "
"passed","Tue May 02 18:27:33 GMT 2023","Tue May 02 18:27:46 GMT 2023","12962","player.muse","test_groups_namespace","","","","test_playback_state_using_modifyGroup_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using modifyGroup and
    group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[False-False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:24:32 GMT 2023","Tue May 02 18:24:39 GMT 2023","7024","player.muse","test_shared_muse_logic","","","","test_subscribe_unsubscribe","
    Verifies unsubscribe functionality
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:37:15 GMT 2023","Tue May 02 18:37:24 GMT 2023","9125","player.muse","test_saved_groups","","","","test_saved_groups_updateArea_updates_areaIds","
    Verify areaIds are updated on a group when a player in an existing area is updated to be removed from the area
    based on thr areaIds filtering rules that update areaIds associated with valid  players
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:24:59 GMT 2023","Tue May 02 18:25:01 GMT 2023","2073","player.muse","test_groupVolume_namespace","","","","test_set_relative_volume","
    Tests setRelativeVolume command

    :param ws_client:
    :return:
    "
"skipped","Tue May 02 17:48:41 GMT 2023","Tue May 02 17:48:41 GMT 2023","1","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Disabled-locationID Set-Muse HHID Clear]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"passed","Tue May 02 17:56:42 GMT 2023","Tue May 02 17:56:47 GMT 2023","4749","player.muse","test_ircontrol_namespace","","","","test_ircontrol_on_ht_master_devices[device_filter0]","
    Verify that the hometheater players support IRControl
    :param function_dut:
    :param device_filter:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-BUSINESS-CQ server 401 resp]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 18:33:42 GMT 2023","Tue May 02 18:33:58 GMT 2023","15225","player.muse","test_saved_groups","","","","test_saved_groups_union_of_areaIds_group_coordinator_delegation","
    Verify createGroup and setGroupMembers call with empty playerIds and non-empty areaIds modifies/creates the group
    by delegating the group coordinator and updates the playerIds and areaIds for the targeted group
    and does not interfere with other groups in the HH
    :param module_dut:
    :param setup_teardown_two_zps:
    :param ws_client:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 18:22:04 GMT 2023","Tue May 02 18:22:05 GMT 2023","1003","player.muse","test_platformInternal_namespace","","","","test_sync_successful_response[False]","
    Send sync command and verify response is correct
    SWPBL-89626
    https://confluence.sonos.com/pages/viewpage.action?pageId=112639757#MuseProtocol-%22platformInternal%22namespace-sync(householdId)
    :param ws_client:
    :param full_sync:
    :return:
    "
"passed","Tue May 02 17:48:21 GMT 2023","Tue May 02 17:48:23 GMT 2023","2136","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpDeviceProperties]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"skipped","Tue May 02 17:46:37 GMT 2023","Tue May 02 17:46:37 GMT 2023","0","player.muse","test_info_namespace","","","","test_getInfo[HDMI Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 17:56:27 GMT 2023","Tue May 02 17:56:27 GMT 2023","73","player.muse","test_audioClip_namespace","","","","test_audio_clip_ACTIVE_change_volume_success[default audioclip setting]","
    Test to verify volume buttons work as expected when
    an audioClip is in ACTIVE state
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param set_initial_volume:
    :return:
    "
"passed","Tue May 02 18:34:07 GMT 2023","Tue May 02 18:34:55 GMT 2023","48216","player.muse","test_muse_playReport","","","","test_playReport_stream_error","
    SWPBL-116125
    Verify streaming error fields are present in the playReport should one happen
    :param module_dut:
    :param ws_client:
    :param mock_cq_server:
    :return:
    "
"passed","Tue May 02 17:57:49 GMT 2023","Tue May 02 17:57:51 GMT 2023","1256","player.muse","test_playbackMetadata_namespace","","","","test_rate_item_invalid_itemId_values[No Type]","
    Verify the player sends an error if the itemId is blank or null
    "
"skipped","Tue May 02 17:46:22 GMT 2023","Tue May 02 17:46:22 GMT 2023","0","player.muse","test_info_namespace","","","","test_getInfo[FIXED_VOLUME Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 17:58:40 GMT 2023","Tue May 02 17:58:40 GMT 2023","73","player.muse","test_playback_namespace","","","","test_loadLineIn_on_linein_and_non_linein_zps[True-device_filter1]","
    Verify the loadLineIn commands works as expected on linein and non-linein ZPs
    :param ws_client:
    :param function_dut:
    :param explicit_deviceId:
    :return:
    "
"passed","Tue May 02 18:22:57 GMT 2023","Tue May 02 18:22:57 GMT 2023","48","player.muse","test_platformInternal_namespace","","","","test_invalidateCache_bad_cacheNamespace[Bad cacheNamespace]","
    SWPBL-171354: Multiple Muse Caches
    Verify that an error is thrown when a bad cacheNamespace or cacheData is given
    "
"passed","Tue May 02 17:56:34 GMT 2023","Tue May 02 17:56:39 GMT 2023","5044","player.muse","test_homeTheater_namespace","","","","test_homeTheater_namespace_options[enhanceDialog]","
    Verify that a muse client can get and set the nightMode option on home theater devices.
    :param module_dut:
    :param ws_client:
    :param test_input:
    :return:
    "
"passed","Tue May 02 18:22:10 GMT 2023","Tue May 02 18:22:15 GMT 2023","5762","player.muse","test_platformInternal_namespace","","","","test_invalidateCache_populates_replicated_file","
    SWPBL-153417
    The invalidateCache command will be used to invalidate the local player's
    cache of various services(mhs, auth, entitlements). To do this, the command generates and updates a replicated file
    with the time of when the cache is good until.

    This test is to verify the mechanism of the file management. The file should be created if it doesn't exist and the
    correct entry in it should be updated after each invalidate call is made. The file should then be replicated across
    the household.

    Note:
    The player uses the UUID in the value field for invalidation logic.
    That value has to change in order for the caches to be invalidated.

    Example httpcaches.json:
    {u'entries': [{u'expires': u'1970-01-01T00:47:10.000Z',
    u'key': u'authzTokens',
    u'lastUsed': u'1970-01-01T00:47:10.000Z',
    u'value': u'f127fce7-2ef6-4e85-96e2-e31c4bb427ac'}],
    u'fileSchemaVersion': 1,
    u'fileVersion': 2,
    u'lastUpdateDevice': u'RINCON_7828CA0922C801400'}

    "
"passed","Tue May 02 17:58:22 GMT 2023","Tue May 02 17:58:25 GMT 2023","3011","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_httpAuthorization_truncated_to_512_bytes[520_BYTES-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl and LONG_HTTP_AUTH truncates
    the httpAuthorization param received by the mock to 512 bytes
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Tue May 02 17:58:44 GMT 2023","Tue May 02 17:58:44 GMT 2023","72","player.muse","test_playback_namespace","","","","test_loadLineIn_on_linein_and_non_linein_zps[False-device_filter0]","
    Verify the loadLineIn commands works as expected on linein and non-linein ZPs
    :param ws_client:
    :param function_dut:
    :param explicit_deviceId:
    :return:
    "
"passed","Tue May 02 18:33:08 GMT 2023","Tue May 02 18:33:18 GMT 2023","10298","player.muse","test_saved_groups","","","","test_saved_groups_union_of_areaIds_group_member_addition","
    Verify createGroup and setGroupMembers call with empty playerIds and non-empty areaIds modifies/creates the group
    by adding the group member and updates the playerIds and areaIds for the targeted group
    and does not interfere with other groups in the HH
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:48:49 GMT 2023","Tue May 02 17:48:58 GMT 2023","8863","cloud.lechmere","test_mock_lechmere_connections","","","","test_fcs_flag_lechmere_v7[Default Mock Config]","
    SWPBL-203163: Use an FCS to control the player advertising lechmere v6 or v7
    :param module_dut:
    :param mock_player_services_control:
    :param ws_client_v2:
    "
"passed","Tue May 02 17:48:15 GMT 2023","Tue May 02 17:48:18 GMT 2023","2144","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpContentDirectory]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"passed","Tue May 02 17:57:19 GMT 2023","Tue May 02 17:57:22 GMT 2023","3011","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_httpAuthorization_truncated_to_512_bytes[511_BYTES-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl and LONG_HTTP_AUTH truncates
    the httpAuthorization param received by the mock to 512 bytes
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 17:57:30 GMT 2023","Tue May 02 17:57:31 GMT 2023","1169","player.muse","test_playbackMetadata_namespace","","","","test_rate_item_invalid_itemId_values[Rating Empty]","
    Verify the player sends an error if the itemId is blank or null
    "
"skipped","Tue May 02 17:48:38 GMT 2023","Tue May 02 17:48:38 GMT 2023","1","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Enabled-locationID Clear-Muse HHID Clear]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"skipped","Tue May 02 17:48:56 GMT 2023","Tue May 02 17:48:56 GMT 2023","0","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Disabled-locationID Clear-Muse HHID Clear]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"passed","Tue May 02 18:23:34 GMT 2023","Tue May 02 18:23:35 GMT 2023","1002","player.muse","test_shared_muse_logic","","","","test_bad_header_params[no namespace]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GM_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"skipped","Tue May 02 18:26:51 GMT 2023","Tue May 02 18:26:51 GMT 2023","73","player.muse","test_muse_playReport","","","","test_playReport_avt_queue_delegation","
    Verifies playReport events for the AVT queue post delegation have a valid apiKey UUID value
    :param dut_manager:
    :param ws_client:
    :param module_dut:
    :param mock_cq_control:
    :param mock_cq_server:
    :param websocket_manager:
    :return:
    "
"passed","Tue May 02 18:20:10 GMT 2023","Tue May 02 18:20:11 GMT 2023","1064","player.muse","test_basic_formatting","","","","test_no_body","
    Ensure an error is thrown if no body is sent
    :param module_dut:
    :param ws_client_v2:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_hdmi_namespace","","","","test_hdmi_on_hdmi_devices[device_filter0]","
    Verify that the hometheater players can support hdmi.
    :param function_dut:
    :param device_filter:
    :return:
    "
"skipped","Tue May 02 17:59:27 GMT 2023","Tue May 02 17:59:27 GMT 2023","0","player.muse","test_playback_namespace","","","","test_loadContainer_local_share[Play specific artist from local library]","
    SWPBL-145583
    Verify loadContainer works with local library files via the following methods:
    1. an entire samba share
    2. a specific artist
    3. a specific playlist
    :param module_dut:
    :param md_type:
    :return:
    "
"skipped","Tue May 02 18:30:54 GMT 2023","Tue May 02 18:30:55 GMT 2023","75","player.muse","test_muse_playReport","","","","test_playReport_shared_queue_delegation","
    Verifies playReport events for the shared queue post reboot have a valid apiKey delegation value
    :param websocket_manager:
    :param dut_manager:
    :param module_dut:
    :param mock_cq_server:
    :param mock_cq_control:
    :param http_mp3_server:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[True-True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:23:18 GMT 2023","Tue May 02 18:23:19 GMT 2023","1064","player.muse","test_shared_muse_logic","","","","test_bad_header_params[no groupId]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 17:46:39 GMT 2023","Tue May 02 17:47:20 GMT 2023","41541","cloud.lechmere","test_mock_lechmere_connections","","","","test_muse_hhid_and_locationid_clearing[Default Mock Config]","
    SWPBL-188324
    Tests early implementation of lechmere v7 which adds support for locationId, in this test we will verify
    that museHouseholdId and locationId, can coexist, and be cleared independently by sending setConfig commands
    with the appropriate ids set or absent.

    :param module_dut:
    :param mock_player_services_control:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GC_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:21:36 GMT 2023","Tue May 02 18:21:49 GMT 2023","12406","player.muse","test_global_namespace","","","","test_GroupCoordinatorChangedEvent_websocketUrl_v2","
    Creates a group and verifies the WS URL in a getGroups response for grouped players has the correct format
    Breaks apart the group and verifies that the WS URL in GroupCoordinatorChangedEvent has the correct format
    SWPBL-89976
    MUSE implementation note:
    websocketUrl (optional) - Only included if groupStatus is GROUP_STATUS_MOVED.
    Reflects the WebSocket URL of the player that is the new coordinator for the group
    :param :
    :param websocket_manager:
    :param dut_manager:
    :param module_dut:
    :param ws_client_v2:
    :return:
    "
"passed","Tue May 02 17:49:18 GMT 2023","Tue May 02 17:49:19 GMT 2023","1003","player.muse","test_upnp_namespace","","","","test_upnpAVTransport_call_success_and_valid_event_body","
    Verify:
    1) call method returns requested output params for upnpAVTransport namespace
    2) events return a body param with base64 encoded string which decodes to a valid xml
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:59:17 GMT 2023","Tue May 02 17:59:24 GMT 2023","7009","player.muse","test_playback_namespace","","","","test_avtransport_playback_state_transition_on_togglePlayPause_from_buffering_to_paused","
    Perform togglePlayPause command and verify that the player AVTransport transitions as expected
    BUFFERED  ->  PLAYING
    :param module_dut:
    :param ws_client:
    :param mock_cq_control:
    :return:
    "
"passed","Tue May 02 17:54:24 GMT 2023","Tue May 02 17:54:25 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_audio_clip_error_invalid_clipType[clipType = INVALID]","
    Test to verify loadAudioClip command with different priorities,
    INVALID clipType returns INVALID_OBJECT_ID error
    :param ws_client:
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :return:
    "
"passed","Tue May 02 18:23:24 GMT 2023","Tue May 02 18:23:25 GMT 2023","1003","player.muse","test_shared_muse_logic","","","","test_bad_header_params[no playerId]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 18:25:36 GMT 2023","Tue May 02 18:25:37 GMT 2023","1004","player.muse","test_shared_muse_logic","","","","test_muse_maxlength_enforced","
    SWPBL-172975: Create a maxLength muse test
    For this test we will use createArea, and feed in a ""name"" that is larger than the maxLength of 64
    characters. The string should be truncated to 64. The ""name"" string will also include an escaped quote
    which was the crux of the original bug (linked in the Jira).
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:55:43 GMT 2023","Tue May 02 17:55:45 GMT 2023","2008","player.muse","test_audioClip_namespace","","","","test_audio_clip_HTTPS_streamUrl_auth[httpAuth = None-default audioclip setting]","
    Test to verify loadAudioClip command with HTTPS streamUrl (proto = HTTPS) with
    and without httpAuthorization and verify httpAuthorization is sent to mock CQ server
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :param verify_http_authorization: verify actual and expect httpAuth
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 18:24:31 GMT 2023","Tue May 02 18:24:47 GMT 2023","16216","player.muse","test_groupVolume_namespace","","","","test_verify_groupVolume_reports_correct_volume_level_after_reboot","
    SWPBL-63287
    Verify that after a reboot, groupVolume events report the correct volume level,
    whatever that level was set before the reboot

    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:56:49 GMT 2023","Tue May 02 17:56:51 GMT 2023","1843","player.muse","test_ircontrol_namespace","","","","test_ircontrol_on_non_ht_master_devices[device_filter0]","
    Verify that the non hometheater players do not support IRControl
    :param function_dut:
    :param device_filter:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-BUSINESS-CQ Server off]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 17:48:36 GMT 2023","Tue May 02 17:48:39 GMT 2023","2143","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpMusicServices]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"passed","Tue May 02 17:56:13 GMT 2023","Tue May 02 17:56:14 GMT 2023","1009","player.muse","test_cloudqueue_misc","","","","test_load_cloud_queue_auth_header[Secured CQ Server]","
    SWPBL-108779: Player Should Not Send Authorization Header To Non-secure Cloud Queue Endpoints
    If the CQ endpoint is insecure (http), the player should not set the Authorization header in the media request.
    :param ws_client:
    :param mock_cq_control
    :return:
    "
"passed","Tue May 02 18:20:30 GMT 2023","Tue May 02 18:20:31 GMT 2023","1004","player.muse","test_basic_formatting","","","","test_cmd_id_cast_to_string","
    Ensure that websocket calls an int cmdId get translated seamlessy to string.
    :param module_dut:
    :param ws_client_v2:
    "
"passed","Tue May 02 18:32:06 GMT 2023","Tue May 02 18:32:20 GMT 2023","13794","player.muse","test_saved_groups","","","","test_source_areas_ids_version_changed_when_remote_zps_source_area_ids_is_changed","
    Test to verify SourceAreaUpdateID changes and doesn't change on ZP2 when
    module_dut's SourceAreasUpdateID (remote ZP) is updated and not updated
    :param dut_manager:
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:46:52 GMT 2023","Tue May 02 17:46:54 GMT 2023","1115","player.muse","test_info_namespace","","","","test_getInfo_rest[Use Muse API v1]","
    Verifies the fields in the JSON returned from a getInfo call
    Verifies V2 WS/REST format
    SWPBL-89976 - Use well known name in muse
    :param module_dut:
    :param api_version:
    :return:
    "
"passed","Tue May 02 18:35:07 GMT 2023","Tue May 02 18:35:20 GMT 2023","12732","player.muse","test_saved_groups","","","","test_saved_groups_union_of_playerIds_and_areaIds_group_coordinator_delegation","
    Verify setGroupMembers call with non-empty playerIds and areaIds modifies/creates the group
    by delegating the group coordinator and updates the playerIds and areaIds for the targeted group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-BUSINESS-CQ server 202 resp]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 17:58:59 GMT 2023","Tue May 02 17:59:07 GMT 2023","7174","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_shared_queue_PAUSED[clipBehavior = [None]]","
    On a standalone ZP with media content (Playback State PAUSED),
    verify loadAudioClip with empty clipBehavior:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param clipBehavior: clipBehavior array
    :return:
    "
"passed","Tue May 02 17:56:02 GMT 2023","Tue May 02 17:56:03 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_audio_clip_error_invalid_param_with_HTTP_streamUrl_with_httpAuthorization[httpAuth = DEFAULT_HTTP_AUTHORIZATION]","
    Test to verify loadAudioClip command with HTTP streamUrl with httpAuthorization
    returns INVALID_PARAM and httpAuthorization is sent to mock CQ server
    :param ws_client:
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param httpAuthorization: HTTP/HTTPS
    :return:
    "
"passed","Tue May 02 18:25:14 GMT 2023","Tue May 02 18:25:15 GMT 2023","1042","player.muse","test_shared_muse_logic","","","","test_set_volume[None-True]","
    Verify a range of values work. Out of bounds on the high side generates error, oob low side clamps to 0
    SWPBL-105577 - We clamp all negative values to 0
    :param module_dut:
    :param ws_client:
    :param volume:
    :param muted:
    :return:
    "
"passed","Tue May 02 18:23:44 GMT 2023","Tue May 02 18:23:45 GMT 2023","1002","player.muse","test_shared_muse_logic","","","","test_bad_header_params[bad playerId]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 17:54:42 GMT 2023","Tue May 02 17:54:44 GMT 2023","2014","player.muse","test_audioClip_namespace","","","","test_audio_clip_success_with_track_and_CQ_playback[default audioclip setting]","
    Test to verify loadAudioClip command with different priorities,
    clipType with streamUrl followed by cancelAudioClip command
    with CQ playback and verify CQ playback resumes
    after audioClip commands
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 18:31:33 GMT 2023","Tue May 02 18:32:06 GMT 2023","32754","player.muse","test_muse_metric_logging","","","","test_location_id_reported[Default Mock Config]","
    SWPBL-199720
    Verify that the new locationId field is reported in metrics events
    :param module_dut: The device under test
    :param mock_player_services_control: A mock lechmere instance used for setting the locationID
    :param mock_cq_server: A mock for gathering metrics events for verification
    "
"skipped","Tue May 02 18:25:52 GMT 2023","Tue May 02 18:25:52 GMT 2023","0","player.muse","test_groups_namespace","","","","test_capability_from_response_on_unsupported_devices[device_filter1-supported_devices1-AIRPLAY]","
    Test getGroups response from unsupported_device and verify it
    - does not advertise CAPABILITY on unsupported_zp
    - advertises CAPABILITY on supported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param supported_devices:
    :param capability:
    :return:
    "
"passed","Tue May 02 17:56:01 GMT 2023","Tue May 02 17:56:03 GMT 2023","2164","player.muse","test_homeTheater_namespace","","","","test_loadHomeTheaterPlayback_on_ht_master_TVautoplay_already_on","
    Verify that the player enters TV playback mode if autoplay is already enabled on the player
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:24:19 GMT 2023","Tue May 02 18:24:28 GMT 2023","8851","player.muse","test_shared_muse_logic","","","","test_group_status","
    Tests the group states during grouping/ungrouping/etc

    :param module_dut:
    :param ws_client:
    :param websocket_manager:
    :param dut_manager:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GC_targeted[False-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GC) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GC (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:25:26 GMT 2023","Tue May 02 18:25:28 GMT 2023","1411","player.muse","test_groups_namespace","","","","test_getGroups_includeDeviceInfo_as_query_param[device_filter0]","
    SWPBL-129657
    Verify ""includeDeviceInfo"" works as a query param
    :param function_dut:
    :return:
    "
"passed","Tue May 02 18:23:52 GMT 2023","Tue May 02 18:23:53 GMT 2023","646","player.muse","test_muse_metric_logging","","","","test_config_download_metrics_service_success[Metrics Config URL]","
    Verifies metric config file can be successfully downloaded from the live Metrics Config service
    SWPBL-133386
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:34:23 GMT 2023","Tue May 02 18:34:40 GMT 2023","16821","player.muse","test_saved_groups","","","","test_saved_groups_union_of_playerIds_and_areaIds_group_member_modification","
    Verify createGroup and setGroupMembers call with non-empty playerIds and areaIds modifies/creates the group
    by adding/removing the group member and updates the playerIds and areaIds for the targeted group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:24:58 GMT 2023","Tue May 02 18:24:59 GMT 2023","1037","player.muse","test_shared_muse_logic","","","","test_set_volume[19-True]","
    Verify a range of values work. Out of bounds on the high side generates error, oob low side clamps to 0
    SWPBL-105577 - We clamp all negative values to 0
    :param module_dut:
    :param ws_client:
    :param volume:
    :param muted:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-CONSUMER-CQ server 480 resp]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 17:48:10 GMT 2023","Tue May 02 17:48:25 GMT 2023","14963","cloud.lechmere","test_mock_lechmere_connections","","","","test_locid_muse_headers[Default Mock Config-locationID Set-Muse HHID Clear]","
    SWPBL-189064
    Verify that locationId is properly represented in events emitted by muse
    :param module_dut:
    :param mock_player_services_control:
    :param ws_client_v2:
    :param mhhid_set:
    :param locationid_set:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-BUSINESS-CQ Radio alarm source]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 17:46:56 GMT 2023","Tue May 02 17:46:58 GMT 2023","1840","player.muse","test_info_namespace","","","","test_getInfo_rest[Use Muse API v2]","
    Verifies the fields in the JSON returned from a getInfo call
    Verifies V2 WS/REST format
    SWPBL-89976 - Use well known name in muse
    :param module_dut:
    :param api_version:
    :return:
    "
"passed","Tue May 02 17:58:14 GMT 2023","Tue May 02 17:58:15 GMT 2023","1053","player.muse","test_playbackSession_namespace","","","","test_parse_unicode_request_json[Macédoine, l'ex-République Yougoslave de]","
    SWPBL-118495
    Verifies that requests that contain JSON with unicode escape sequences are parsed successfully
    :param ws_client:
    :param unicode_string:
    :return:
    "
"passed","Tue May 02 17:59:25 GMT 2023","Tue May 02 17:59:40 GMT 2023","14809","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_avt_queue_PLAYING[clipBehavior = [None]]","
    On a standalone ZP with media content - AVT Queue (Playback State PLAYING),
    verify loadAudioClip with empty clipBehavior:
    1. pauses media content before audio clip is ACTIVE
    2. resumes media content after audio clip is DONE
    Note: If selected device is mixing incapable, expect the device in test to pause playback
    because mixing limitation on incapable devices due to processor limitations.
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param module_dut:
    :param clipBehavior: clipBehavior array
    :return:
    "
"passed","Tue May 02 17:55:38 GMT 2023","Tue May 02 17:55:40 GMT 2023","2317","player.muse","test_hdmi_namespace","","","","test_hdmi_on_non_hdmi_devices[device_filter0]","
    Verify that the non hdmi players do not support hdmi.
    :param function_dut:
    :param device_filter:
    :return:
    "
"passed","Tue May 02 17:46:40 GMT 2023","Tue May 02 17:46:47 GMT 2023","6549","player.muse","test_info_namespace","","","","test_getInfo_with_group","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call with grouped member
    :param websocket_manager:
    :param dut_manager:
    :return:
    "
"passed","Tue May 02 18:20:06 GMT 2023","Tue May 02 18:20:07 GMT 2023","1046","player.muse","test_basic_formatting","","","","test_bad_body[Empty]","
    Test that malformed bodies throw an error
    :param module_dut:
    :param ws_client_v2:
    :param body: The malformed body to send
    "
"passed","Tue May 02 18:20:43 GMT 2023","Tue May 02 18:22:20 GMT 2023","96029","player.muse","test_muse_metric_logging","","","","test_event_reporting[Default Mock Config]","

    :param module_dut:
    :param mock_cq_control:
    :param mock_player_services_control:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:49:27 GMT 2023","Tue May 02 17:49:28 GMT 2023","1021","player.muse","test_upnp_namespace","","","","test_upnpAlarmClock_call_success","
    Verify call method returns requested output params for upnpAlarmClock namespace
    :param ws_client:
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:49:33 GMT 2023","Tue May 02 17:49:34 GMT 2023","1153","player.muse","test_upnp_namespace","","","","test_upnpHTControl_call_success_REST[HT_MASTER DUT]","
    Verify call method returns requested output params for upnpHTControl namespace using REST
    :param function_dut:
    :return:
    "
"passed","Tue May 02 17:54:06 GMT 2023","Tue May 02 17:54:09 GMT 2023","3650","player.muse","test_audioClip_namespace","","","","test_audio_clip_success_with_track_and_no_CQ_playback[ogg track clip source-default audioclip setting]","
    Test to verify loadAudioClip command with different priorities,
    clipType with streamUrl followed by cancelAudioClip command
    without any CQ playback and verify volume is unchanged
    after audioClip commands
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-CONSUMER-CQ Radio alarm source]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 18:25:32 GMT 2023","Tue May 02 18:25:32 GMT 2023","42","player.muse","test_shared_muse_logic","","","","test_rest_V1_empty_apiKey_rejected","
    SWPBL-144572 | Verify request without X-Sonos-Api-Key header while sending a Muse REST V1 request results in failure
    :param module_dut:
    :return:
    "
"skipped","Tue May 02 18:23:54 GMT 2023","Tue May 02 18:23:54 GMT 2023","0","player.muse","test_muse_metric_logging","","","","test_muse_upnp_tunneled","
    SWPBL-182835: Verifies usageMetrics log has the associated upnp method nested in ""events"" when sending a tunneled
    muse-upnp command.
    :param ws_client:
    :param module_dut:
    :param mock_cq_server:
    :return:
    "
"skipped","Tue May 02 18:26:04 GMT 2023","Tue May 02 18:26:04 GMT 2023","74","player.muse","test_muse_playReport","","","","test_playReport_avt_queue_smapi_v1[Normal length tracks]","
    Verifies playReport events for the AVT SMAPI v1 queue have a valid apiKey UUID value
    :param ws_client:
    :param module_dut:
    :param mock_cq_control:
    :return:
    "
"passed","Tue May 02 17:46:26 GMT 2023","Tue May 02 17:46:29 GMT 2023","3154","player.muse","test_info_namespace","","","","test_getInfo[SUB Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"skipped","Tue May 02 18:30:31 GMT 2023","Tue May 02 18:30:31 GMT 2023","70","player.muse","test_saved_groups","","","","test_saved_groups_max_areas_delegation","
    Verify max areas can be delegated from GC to GM in a group when GC is removed
    :param module_dut:
    :param groups_in_hh:
    :param ws_client:
    :param dut_manager:
    :param websocket_manager:
    :return:
    "
"passed","Tue May 02 17:47:59 GMT 2023","Tue May 02 17:48:19 GMT 2023","19954","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Enabled-locationID Set-Muse HHID Clear]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"skipped","Tue May 02 17:58:36 GMT 2023","Tue May 02 17:58:36 GMT 2023","0","player.muse","test_audioClip_namespace","","","","test_loadAudioClip_with_pause_content_over_spdif_playback[SPDIF Capable DUT]","
    SWPBL-143086
    Verify that playing an audioClip that forces content pause over a spdif stream doesn't return an error and that
    the spdif stream does stop and resume.
    :param function_dut:
    :return:
    "
"passed","Tue May 02 18:27:22 GMT 2023","Tue May 02 18:27:38 GMT 2023","16176","player.muse","test_muse_metric_logging","","","","test_insecure_oauth_fail_telemetry[http responseStatus 401-Default Mock Config]","
    SWPBL-195116: This tests if INSECURE V1 muse commands sent over REST with HH_CONFIG_ADMIN scope send telemetry when
    authorized and unauthorized.
    :param module_dut:
    :param mock_cq_server:
    :param mock_player_services_control
    :param mock_hh_config_admin_oauth_token
    :param authorization
    :return:
    "
"passed","Tue May 02 17:48:26 GMT 2023","Tue May 02 17:48:45 GMT 2023","19116","cloud.lechmere","test_mock_lechmere_connections","","","","test_locid_muse_headers[Default Mock Config-locationID Clear-Muse HHID Set]","
    SWPBL-189064
    Verify that locationId is properly represented in events emitted by muse
    :param module_dut:
    :param mock_player_services_control:
    :param ws_client_v2:
    :param mhhid_set:
    :param locationid_set:
    :return:
    "
"passed","Tue May 02 17:47:49 GMT 2023","Tue May 02 17:48:08 GMT 2023","18919","cloud.lechmere","test_mock_lechmere_connections","","","","test_locid_muse_headers[Default Mock Config-locationID Set-Muse HHID Set]","
    SWPBL-189064
    Verify that locationId is properly represented in events emitted by muse
    :param module_dut:
    :param mock_player_services_control:
    :param ws_client_v2:
    :param mhhid_set:
    :param locationid_set:
    :return:
    "
"skipped","Tue May 02 18:22:06 GMT 2023","Tue May 02 18:22:06 GMT 2023","0","player.muse","test_platformInternal_namespace","","","","test_reboot_successful_response","
    SWPBL-106563
    Control API: Implement player reboot in Muse
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:24:08 GMT 2023","Tue May 02 18:24:09 GMT 2023","1002","player.muse","test_shared_muse_logic","","","","test_bad_header_params_v2[no authorization]","
    Negative test sends empty values for some possible header keys and verifies the correct error is thrown
    :param ws_client_v2:
    :param param:
    :param error:
    :return:
    "
"skipped","Tue May 02 18:25:47 GMT 2023","Tue May 02 18:25:47 GMT 2023","0","player.muse","test_groups_namespace","","","","test_capability_from_response_on_supported_devices[device_filter2-unsupported_devices2-FIXED_VOLUME]","
    Test getGroups response from supported_device and verify it
    - advertises CAPABILITY on supported_zp
    - does not advertise CAPABILITY on unsupported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param capability:
    :param unsupported_devices:
    :return:
    "
"passed","Tue May 02 18:23:30 GMT 2023","Tue May 02 18:23:31 GMT 2023","1003","player.muse","test_shared_muse_logic","","","","test_bad_header_params[no sessionId]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 17:56:34 GMT 2023","Tue May 02 17:56:54 GMT 2023","19656","player.muse","test_audioClip_namespace","","","","test_audio_clip_status_on_concurrent_ws_connections[default audioclip setting]","
    Test to verify subscribe and unsubscribe audioClip commands on
    multiple websocket connections
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 17:48:21 GMT 2023","Tue May 02 17:48:36 GMT 2023","15818","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Enabled-locationID Clear-Muse HHID Set]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"passed","Tue May 02 18:25:08 GMT 2023","Tue May 02 18:25:09 GMT 2023","1040","player.muse","test_shared_muse_logic","","","","test_set_volume[92-None]","
    Verify a range of values work. Out of bounds on the high side generates error, oob low side clamps to 0
    SWPBL-105577 - We clamp all negative values to 0
    :param module_dut:
    :param ws_client:
    :param volume:
    :param muted:
    :return:
    "
"skipped","Tue May 02 17:48:47 GMT 2023","Tue May 02 17:48:47 GMT 2023","1","cloud.lechmere","test_mock_lechmere_connections","","","","test_locid_muse_headers[Default Mock Config-locationID Clear-Muse HHID Clear]","
    SWPBL-189064
    Verify that locationId is properly represented in events emitted by muse
    :param module_dut:
    :param mock_player_services_control:
    :param ws_client_v2:
    :param mhhid_set:
    :param locationid_set:
    :return:
    "
"skipped","Tue May 02 17:50:16 GMT 2023","Tue May 02 17:50:16 GMT 2023","0","player.muse","test_upnp_namespace","","","","test_upnp_eventing_load[TLS Cached]","
    SWPBL-196285 and SWPBL-195363
    Repeatedly set a string which will cause a UPnP event. Take CPU and memory measurements of the testbed.
    This is to gauge how much additional resources are utilized by TLS secured UPnP.
    :param dut_manager:
    :flush_tls_cache: Flushing the tls cache will cause much more resources to be used, as each connection the full handshake will need to occur
    :return:
    "
"passed","Tue May 02 18:30:45 GMT 2023","Tue May 02 18:31:11 GMT 2023","25850","player.muse","test_saved_groups","","","","test_saved_groups_using_createGroup","
    Verify areaIds are added/cleared/updated/unchanged on all ZPs using createGroup cmd when:
     1) group is created with areaIds arg - areaIds added
     - Set SourceAreaIds using GC, GM, verify:
     -  a) change via GM does not trigger a change of areaIds for the group in groups response
     -  b) change via GC triggers a change of areaIds for the group in groups response
     2) area is removed using removeArea - areaIds updated
     3) new group member is added to existing group - areaIds unchanged
     4) createGroup on existing group - areaIds updated
     5) group member is removed from existing group - areaIds unchanged
     6) createGroup with invalid areaIds fails - areaIds unchanged
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :param dut_manager:
    :return:
    "
"passed","Tue May 02 17:58:09 GMT 2023","Tue May 02 17:58:10 GMT 2023","1054","player.muse","test_playbackSession_namespace","","","","test_parse_unicode_request_json[¥2300.00]","
    SWPBL-118495
    Verifies that requests that contain JSON with unicode escape sequences are parsed successfully
    :param ws_client:
    :param unicode_string:
    :return:
    "
"passed","Tue May 02 18:25:36 GMT 2023","Tue May 02 18:25:39 GMT 2023","3041","player.muse","test_groups_namespace","","","","test_creating_groups_with_invalid_playerIds_failure_v2[device_filter0]","
    Test to verify grouping cmds with invalid playerIds return INVALID_PARAM error along with
    invalid playerIds in playerIds array with type playerSetError
    :param ws_client:
    :param function_dut:
    :return:
    "
"passed","Tue May 02 18:31:42 GMT 2023","Tue May 02 18:32:05 GMT 2023","23636","player.muse","test_muse_playReport","","","","test_playReport_shared_queue_memory","
    Verifies playReport events for the shared queue with memory exhausted have a valid apiKey UUID value
    :param module_dut:
    :param mock_cq_control:
    :param http_mp3_server_separate_tracks:
    :return:
    "
"passed","Tue May 02 17:58:00 GMT 2023","Tue May 02 17:58:01 GMT 2023","1180","player.muse","test_playbackMetadata_namespace","","","","test_rate_item_invalid_itemId_values[Bad Type]","
    Verify the player sends an error if the itemId is blank or null
    "
"passed","Tue May 02 17:49:30 GMT 2023","Tue May 02 17:49:31 GMT 2023","892","player.muse","test_upnp_namespace","","","","test_upnpAudioIn_call_success_REST[LINE_IN_CAPABLE DUT]","
    Verify call method returns requested output params for upnpAudioIn namespace using REST
    :param function_dut:
    :return:
    "
"passed","Tue May 02 17:47:56 GMT 2023","Tue May 02 17:47:59 GMT 2023","2147","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpAVTransport]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_False_GM_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=False:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    In a non-standalone scenario, default ducking behavior when pauseContent=False is disregarded
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:28:54 GMT 2023","Tue May 02 18:29:01 GMT 2023","6549","player.muse","test_groups_namespace","","","","test_playback_state_using_join_group_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using join group and
    group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 18:32:56 GMT 2023","Tue May 02 18:33:20 GMT 2023","23582","player.muse","test_muse_playReport","","","","test_playReport_system_sounds","
    Verifies playReport events for system sounds(ie, alarms and TruePlay) have a activatedAccountCode of -1
    SWPBL-139574
    :param module_dut:
    :param mock_cq_control:
    :param default_alarm:
    :return:
    "
"passed","Tue May 02 18:23:01 GMT 2023","Tue May 02 18:23:01 GMT 2023","52","player.muse","test_platformInternal_namespace","","","","test_invalidateCache_bad_cacheNamespace[Bad cacheData]","
    SWPBL-171354: Multiple Muse Caches
    Verify that an error is thrown when a bad cacheNamespace or cacheData is given
    "
"passed","Tue May 02 18:24:42 GMT 2023","Tue May 02 18:24:43 GMT 2023","1003","player.muse","test_shared_muse_logic","","","","test_invalid_oauth_token[garbage]","
    SWPBL-93702, SWPBL-93706
    Verify that we can pass a bad or improperly scoped oauth token and it is rejected
    on the player
    :param ws_client:
    :param oauth_token:
    :return:
    "
"passed","Tue May 02 17:56:07 GMT 2023","Tue May 02 17:56:10 GMT 2023","3009","player.muse","test_audioClip_namespace","","","","test_audio_clip_status_ERROR[streamUrl = INVLAID.mp3]","
    Test to verify loadAudioClip command with INVALID streamUrl
    returns ERROR status
    :param ws_client:
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"skipped","Tue May 02 17:58:47 GMT 2023","Tue May 02 17:58:47 GMT 2023","0","player.muse","test_playback_namespace","","","","test_loadLineIn_on_linein_and_non_linein_zps[False-device_filter1]","
    Verify the loadLineIn commands works as expected on linein and non-linein ZPs
    :param ws_client:
    :param function_dut:
    :param explicit_deviceId:
    :return:
    "
"passed","Tue May 02 18:27:09 GMT 2023","Tue May 02 18:27:18 GMT 2023","8798","player.muse","test_groups_namespace","","","","test_playback_state_using_join_group_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using join group and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 18:20:19 GMT 2023","Tue May 02 18:20:20 GMT 2023","1003","player.muse","test_basic_formatting","","","","test_unsupported_cmd","
    Ensure that websocket calls with unsupported commands fail with an error.
    :param module_dut:
    :param ws_client_v2:
    "
"passed","Tue May 02 18:28:39 GMT 2023","Tue May 02 18:30:11 GMT 2023","91368","player.muse","test_muse_playReport","","","","test_playReport_shared_queue_restore","
    Verifies playReport events for the shared queue post reboot have a valid apiKey restore value
    :param mock_cq_control:
    :param http_mp3_server:
    :param module_dut:
    :return:
    "
"skipped","Tue May 02 18:25:55 GMT 2023","Tue May 02 18:25:55 GMT 2023","1","player.muse","test_groups_namespace","","","","test_capability_from_response_on_unsupported_devices[device_filter2-supported_devices2-FIXED_VOLUME]","
    Test getGroups response from unsupported_device and verify it
    - does not advertise CAPABILITY on unsupported_zp
    - advertises CAPABILITY on supported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param supported_devices:
    :param capability:
    :return:
    "
"passed","Tue May 02 17:59:13 GMT 2023","Tue May 02 17:59:20 GMT 2023","7127","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_no_playback[clipBehavior = [None]]","
    On a standalone ZP with no media content (Playback State IDLE),
    verify loadAudioClip with empty clipBehavior:
    1. retains IDLE state before audio clip is ACTIVE
    2. retains IDLE state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param clipBehavior: clipBehavior array
    :return:
    "
"passed","Tue May 02 17:48:26 GMT 2023","Tue May 02 17:48:29 GMT 2023","2138","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpGroupManagement]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"skipped","Tue May 02 17:59:27 GMT 2023","Tue May 02 17:59:27 GMT 2023","0","player.muse","test_playback_namespace","","","","test_loadContainer_local_share[Play entire samba share]","
    SWPBL-145583
    Verify loadContainer works with local library files via the following methods:
    1. an entire samba share
    2. a specific artist
    3. a specific playlist
    :param module_dut:
    :param md_type:
    :return:
    "
"skipped","Tue May 02 17:58:54 GMT 2023","Tue May 02 17:58:54 GMT 2023","1","player.muse","test_playback_namespace","","","","test_loadLineIn_playOnCompletion_off[device_filter0]","
    Verify that with playOnCompletion off, the avt is switched to linein but the ZP does not play
    :param ws_client:
    :param function_dut:
    :return:
    "
"passed","Tue May 02 17:58:05 GMT 2023","Tue May 02 17:58:06 GMT 2023","1046","player.muse","test_playbackSession_namespace","","","","test_parse_unicode_request_json[España]","
    SWPBL-118495
    Verifies that requests that contain JSON with unicode escape sequences are parsed successfully
    :param ws_client:
    :param unicode_string:
    :return:
    "
"passed","Tue May 02 17:48:43 GMT 2023","Tue May 02 17:48:54 GMT 2023","11760","player.muse","test_muse_mdns","","","","test_muse_mdns_txt_info[Default Mock Config-lechmere.v7 Disabled-locationID Clear-Muse HHID Set]","
    Confirms that TXT records for muse adverts on players are valid.
    Updated for SWPBL-199985
    :param module_dut:
    :param mock_player_services_control:
    :param mhhid_set:
    :param locationid_set:
    "
"passed","Tue May 02 18:20:38 GMT 2023","Tue May 02 18:20:48 GMT 2023","9957","player.muse","test_favorites_namespace","","","","test_load_favorite_stream","
    Verifies favoriting a stream, and loading it.
    :param module_dut:
    :param ws_client_v2:
    "
"passed","Tue May 02 17:48:42 GMT 2023","Tue May 02 17:48:44 GMT 2023","2147","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpQueue]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"passed","Tue May 02 17:47:21 GMT 2023","Tue May 02 17:47:48 GMT 2023","27103","cloud.lechmere","test_mock_lechmere_connections","","","","test_locationID_persistence[Default Mock Config]","
    SWPBL-188324 & SWPBL-199720
    Verify that locationID is stored to /jffs/localsettings.txt and ensure after anacapa restart that the registration message carries the locationID
    :param module_dut:
    :param mock_player_services_control:
    :return:
    "
"skipped","Tue May 02 17:55:32 GMT 2023","Tue May 02 17:55:32 GMT 2023","0","player.muse","test_cloudqueue_misc","","","","test_cloudqueue_radio_alarm_default_to_buzzer[Default Mock Config-None-BUSINESS-CQ server 480 resp]","
    SWPBL-148628
    SWPBL-102363
    SWPBL-120776
    In Consumer mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should fall back to use the default
    sonos chime.
    In the positive case, the alarm should be set as the smapi radio station.

    In Business mode, if an alarm is setup to use cq/smapi radio and that radio
    station is not available, the alarm should NOT fall back to use the default
    sonos chime.
    :param module_dut:
    :param mock_cq_server:
    :param mock_smapi_server_manager:
    :param default_alarm:
    :param kill_cq:
    :param request_response
    :param system_type
    :return:
    "
"passed","Tue May 02 17:46:38 GMT 2023","Tue May 02 17:46:38 GMT 2023","115","cloud.lechmere","test_mock_lechmere_connections","","","","test_send_muse_command_to_mock_lechmere[not fragmented]","
    SWPBL-86366
    Verify that the player is able to support continuation frames from the mock lechmere

    :param module_dut:
    :param mock_player_services_control:
    :param fragmented: Boolean that determines if the lechmere command sent should use fragmented data transfer
    :return:
    "
"passed","Tue May 02 17:58:44 GMT 2023","Tue May 02 17:58:50 GMT 2023","6126","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_standalone_shared_queue_PLAYING[clipBehavior = [None]]","
    On a standalone ZP with media content (Playback State PLAYING),
    verify loadAudioClip with empty clipBehavior:
    1. does not pause media content before audio clip is ACTIVE
       (media content is ducked, audio clip is mixed)
    2. resumes media content after audio clip is DONE
       (media content un-ducked)
    Note: If selected device is mixing incapable, expect the device in test to pause playback
    because mixing limitation on incapable devices due to processor limitations.
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param clipBehavior: clipBehavior array
    :param module_dut:
    :return:
    "
"passed","Tue May 02 17:46:37 GMT 2023","Tue May 02 17:46:37 GMT 2023","117","cloud.lechmere","test_mock_lechmere_connections","","","","test_send_muse_command_to_mock_lechmere[fragmented]","
    SWPBL-86366
    Verify that the player is able to support continuation frames from the mock lechmere

    :param module_dut:
    :param mock_player_services_control:
    :param fragmented: Boolean that determines if the lechmere command sent should use fragmented data transfer
    :return:
    "
"passed","Tue May 02 18:21:58 GMT 2023","Tue May 02 18:21:59 GMT 2023","1003","player.muse","test_platformInternal_namespace","","","","test_sync_successful_response[True]","
    Send sync command and verify response is correct
    SWPBL-89626
    https://confluence.sonos.com/pages/viewpage.action?pageId=112639757#MuseProtocol-%22platformInternal%22namespace-sync(householdId)
    :param ws_client:
    :param full_sync:
    :return:
    "
"passed","Tue May 02 17:56:31 GMT 2023","Tue May 02 17:56:33 GMT 2023","2226","player.muse","test_playbackMetadata_namespace","","","","test_player_respects_playhead_position_in_itemWindow_returned_from_rate_track","
    SWPBL-78066
    Verify that the the player will process the playhead position if its included in the itemWindow that gets returned from a rate item command
    "
"passed","Tue May 02 18:23:51 GMT 2023","Tue May 02 18:23:52 GMT 2023","1002","player.muse","test_shared_muse_logic","","","","test_bad_header_params[bad sessionId]","
    Negative test sends empty/invalid values for all the possible header keys and verifies the correct error is thrown
    :param ws_client:
    :param param: Header key to verify, groupId, namespace, etc
    :param value: Value to set the header key
    :param error: Expected error response
    :return:
    "
"passed","Tue May 02 17:48:05 GMT 2023","Tue May 02 17:48:07 GMT 2023","2141","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpAlarmClock]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"skipped","Tue May 02 17:50:16 GMT 2023","Tue May 02 17:50:16 GMT 2023","0","player.muse","test_upnp_namespace","","","","test_upnp_eventing_load[TLS Flushed]","
    SWPBL-196285 and SWPBL-195363
    Repeatedly set a string which will cause a UPnP event. Take CPU and memory measurements of the testbed.
    This is to gauge how much additional resources are utilized by TLS secured UPnP.
    :param dut_manager:
    :flush_tls_cache: Flushing the tls cache will cause much more resources to be used, as each connection the full handshake will need to occur
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PAUSED[False-True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PAUSED),
    verify loadAudioClip (targeted on GC) with pauseContent=True or False:
    1. retains media content PAUSED state before audio clip is ACTIVE
    2. retains media content PAUSED state after audio clip is DONE
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param pauseContent: parametrized True, False
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:24:52 GMT 2023","Tue May 02 18:24:53 GMT 2023","1040","player.muse","test_shared_muse_logic","","","","test_set_volume[150-False]","
    Verify a range of values work. Out of bounds on the high side generates error, oob low side clamps to 0
    SWPBL-105577 - We clamp all negative values to 0
    :param module_dut:
    :param ws_client:
    :param volume:
    :param muted:
    :return:
    "
"passed","Tue May 02 17:56:20 GMT 2023","Tue May 02 17:56:21 GMT 2023","1002","player.muse","test_homeTheater_namespace","","","","test_loadHomeTheaterPlayback_on_linein_devices[device_filter0]","
    Verify that the HT load command doesn't work on line-in capable ZPs
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:48:31 GMT 2023","Tue May 02 17:48:34 GMT 2023","2145","player.muse","test_upnp_namespace","","","","test_upnp_namespace_subscribe_unsubscribe_success[upnpGroupRenderingControl]","
    Last updated for SWPBL-144492
    Verify subscribe and unsubscribe for upnp tunneled namespaces return success.
    Also verify when unsubscribed, the sub id is removed from the player's subscription list.
    :param module_dut:
    :param ws_client:
    :param upnp_service:
    :return:
    "
"passed","Tue May 02 17:56:01 GMT 2023","Tue May 02 17:56:10 GMT 2023","9371","player.muse","test_playbackExtended_namespace","","","","test_playbackExtended_subscribe_unsubscribe_get","
    SWPBL-149147
    Convert workflow playbackExtended test suite to pytest
    Verify sub/unsub/get action of the namespace. Also verify that the playback object is accurate.
    :param module_dut:
    :param ws_client:
    :param mock_cq_server:
    :return:
    "
"passed","Tue May 02 18:21:53 GMT 2023","Tue May 02 18:21:54 GMT 2023","1003","player.muse","test_platformInternal_namespace","","","","test_sync_successful_response[None]","
    Send sync command and verify response is correct
    SWPBL-89626
    https://confluence.sonos.com/pages/viewpage.action?pageId=112639757#MuseProtocol-%22platformInternal%22namespace-sync(householdId)
    :param ws_client:
    :param full_sync:
    :return:
    "
"passed","Tue May 02 17:58:19 GMT 2023","Tue May 02 17:58:20 GMT 2023","1079","player.muse","test_playbackSession_namespace","","","","test_parse_unicode_request_json[Polynésie Française]","
    SWPBL-118495
    Verifies that requests that contain JSON with unicode escape sequences are parsed successfully
    :param ws_client:
    :param unicode_string:
    :return:
    "
"skipped","Tue May 02 18:00:22 GMT 2023","Tue May 02 18:00:22 GMT 2023","0","player.muse","test_audioClip_namespace_pause_and_resume","","","","test_audio_clip_grouped_shared_queue_PLAYING_with_pauseContent_True_GM_targeted[True-0-True]","
    On a sonos grouped ZP config with media content (Playback State PLAYING),
    verify loadAudioClip (targeted on GM) with pauseContent=True:
    1. pauses media content before audio clip is ACTIVE on both GC and GM
    2. plays audioClip on GC and GM (includeGrouped=True) | only on GM (includeGrouped=False)
    3. resumes media content after audio clip is DONE on both GC and GM
    :param ws_client:
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :param grouped_zp_with_playback:
    :param includeGrouped: parametrized True, False
    :param module_dut:
    :return:
    "
"passed","Tue May 02 18:31:32 GMT 2023","Tue May 02 18:31:54 GMT 2023","22075","player.muse","test_saved_groups","","","","test_saved_groups_using_setGroup_and_modifyGroup","
    Verify areaIds are added/cleared/updated/unchanged on all ZPs using setGroup cmd when:
     1) group is created with areaIds arg - areaIds added
     2) setGroup on existing group - areaIds updated
     3) group coordinator is removed from existing group using setGroupMembers- areaIds delegated and unchanged
     4) group coordinator is removed from existing group using modifyGroupMembers- areaIds delegated and unchanged
     5) setGroup with invalid areaIds fails - areaIds unchanged
    :param ws_client:
    :param module_dut:
    :param dut_manager:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :return:
    "
"passed","Tue May 02 17:46:34 GMT 2023","Tue May 02 17:46:37 GMT 2023","2335","player.muse","test_info_namespace","","","","test_getInfo[IR_CONTROL Devices]","
    Verifies the fields in an DiscoveryInfoEvent returned from a getInfo call
    SWPBL-87625 - Implement muse getInfo command
    :param function_dut:
    :param ws_client:
    :return:
    "
"passed","Tue May 02 17:56:17 GMT 2023","Tue May 02 17:56:19 GMT 2023","2008","player.muse","test_audioClip_namespace","","","","test_audio_clip_status_ACTIVE_DONE[default audioclip setting]","
    Test to verify loadAudioClip command returns ACTIVE followed by DONE status
    :param ws_client:
    :param expected_clipType: retrieve expected_clipType from loadAudioClip
    :param streamUrl: Url of the track hosted using mock CQ
    :param priority: priority from priorityEnum
    :param clipType: clipType from clipTypeEnum
    :param audioclip_status_queue: Queue for verifying audioClip Status messages
    :return:
    "
"passed","Tue May 02 18:25:12 GMT 2023","Tue May 02 18:25:14 GMT 2023","2077","player.muse","test_groupVolume_namespace","","","","test_set_relative_volume_clamp_min","
    This test uses a volumeDelta that is currently out of range to verify
    the player clamps audio at 0.

    :param ws_client:
    :return:
    "
"passed","Tue May 02 18:20:14 GMT 2023","Tue May 02 18:20:15 GMT 2023","1045","player.muse","test_basic_formatting","","","","test_no_header","
    Ensure that an error is thrown if the header is missing.
    :param module_dut:
    :param ws_client_v2:
    "
"passed","Tue May 02 17:54:29 GMT 2023","Tue May 02 17:54:30 GMT 2023","1003","player.muse","test_audioClip_namespace","","","","test_cancelAudioClip_with_invalid_id","
    Test to verify cancelAudioClip with an INVALID_ID
    :param ws_client:
    :return:
    "
