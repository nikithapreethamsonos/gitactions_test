"Status","Start Time","Stop Time","Duration in ms","Parent Suite","Suite","Sub Suite","Test Class","Test Method","Name","Description"
"passed","Fri Apr 21 20:03:18 GMT 2023","Fri Apr 21 20:03:20 GMT 2023","2222","player.muse","test_groupVolume_namespace","","","","test_set_volume","
    Test set volume

    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:09:12 GMT 2023","Fri Apr 21 20:09:35 GMT 2023","23873","player.muse","test_saved_groups","","","","test_saved_groups_using_createGroup","
    Verify areaIds are added/cleared/updated/unchanged on all ZPs using createGroup cmd when:
     1) group is created with areaIds arg - areaIds added
     - Set SourceAreaIds using GC, GM, verify:
     -  a) change via GM does not trigger a change of areaIds for the group in groups response
     -  b) change via GC triggers a change of areaIds for the group in groups response
     2) area is removed using removeArea - areaIds updated
     3) new group member is added to existing group - areaIds unchanged
     4) createGroup on existing group - areaIds updated
     5) group member is removed from existing group - areaIds unchanged
     6) createGroup with invalid areaIds fails - areaIds unchanged
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :param dut_manager:
    :return:
    "
"skipped","Fri Apr 21 20:04:08 GMT 2023","Fri Apr 21 20:04:08 GMT 2023","72","player.muse","test_groups_namespace","","","","test_capability_from_response_on_supported_devices[device_filter0-unsupported_devices0-VOICE]","
    Test getGroups response from supported_device and verify it
    - advertises CAPABILITY on supported_zp
    - does not advertise CAPABILITY on unsupported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param capability:
    :param unsupported_devices:
    :return:
    "
"passed","Fri Apr 21 20:03:57 GMT 2023","Fri Apr 21 20:04:00 GMT 2023","2103","player.muse","test_groups_namespace","","","","test_creating_groups_with_invalid_playerIds_failure[device_filter0]","
    Test to verify grouping cmds with invalid playerIds return INVALID_PARAM error along with
    invalid playerIds in playerIds array
    :param ws_client:
    :param function_dut:
    :return:
    "
"passed","Fri Apr 21 20:14:42 GMT 2023","Fri Apr 21 20:14:59 GMT 2023","16289","player.muse","test_saved_groups","","","","test_saved_groups_using_zp_which_is_gc_of_group_with_different_playerId","
    Verify grouping using a zp acting as the group coordinator of a group with a groupId different than
    the zp's playerId does not add the unintentional zp(the one from the groupId) in the group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:03:24 GMT 2023","Fri Apr 21 20:03:27 GMT 2023","2207","player.muse","test_groupVolume_namespace","","","","test_set_relative_volume","
    Tests setRelativeVolume command

    :param ws_client:
    :return:
    "
"skipped","Fri Apr 21 20:08:51 GMT 2023","Fri Apr 21 20:08:51 GMT 2023","0","player.muse","test_groups_namespace","","","","test_getGroups_failure_pre_grouping[device_filter0]","
    Verifies that a createGroup call will fail PRE grouping with inconsistent topology. Puts a ZP in an inconsistent
    state by overriding the groupID(both advertise themselves to be the same group)
    which makes the topology consistency check mark it as invalid.
    SWPBL-130705
    :param websocket_manager:
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:04:24 GMT 2023","Fri Apr 21 20:04:25 GMT 2023","1004","player.muse","test_groups_namespace","","","","test_secondary_devices_not_enabled_by_default[device_filter0]","
    SWPBL-110826
    Verifies that the devices array is NOT shown by default for a getGroups call
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:04:16 GMT 2023","Fri Apr 21 20:04:17 GMT 2023","1080","player.muse","test_groups_namespace","","","","test_capability_from_response_on_unsupported_devices[device_filter0-supported_devices0-VOICE]","
    Test getGroups response from unsupported_device and verify it
    - does not advertise CAPABILITY on unsupported_zp
    - advertises CAPABILITY on supported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param supported_devices:
    :param capability:
    :return:
    "
"passed","Fri Apr 21 20:09:56 GMT 2023","Fri Apr 21 20:10:19 GMT 2023","22736","player.muse","test_saved_groups","","","","test_saved_groups_using_setGroup_and_modifyGroup","
    Verify areaIds are added/cleared/updated/unchanged on all ZPs using setGroup cmd when:
     1) group is created with areaIds arg - areaIds added
     2) setGroup on existing group - areaIds updated
     3) group coordinator is removed from existing group using setGroupMembers- areaIds delegated and unchanged
     4) group coordinator is removed from existing group using modifyGroupMembers- areaIds delegated and unchanged
     5) setGroup with invalid areaIds fails - areaIds unchanged
    :param ws_client:
    :param module_dut:
    :param dut_manager:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :return:
    "
"skipped","Fri Apr 21 20:04:21 GMT 2023","Fri Apr 21 20:04:21 GMT 2023","1","player.muse","test_groups_namespace","","","","test_capability_from_response_on_unsupported_devices[device_filter2-supported_devices2-FIXED_VOLUME]","
    Test getGroups response from unsupported_device and verify it
    - does not advertise CAPABILITY on unsupported_zp
    - advertises CAPABILITY on supported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param supported_devices:
    :param capability:
    :return:
    "
"passed","Fri Apr 21 20:11:01 GMT 2023","Fri Apr 21 20:11:14 GMT 2023","12283","player.muse","test_saved_groups","","","","test_saved_groups_setGroupMembers_with_empty_playerIds_and_areaIds","
    Verify setGroupMembers call with empty playerIds and areaIds on a group
    with non-empty areaIds and playerIds breaks apart the targeted group and clears areaIds
    and does not interfere with other groups in the HH
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:03:50 GMT 2023","Fri Apr 21 20:03:51 GMT 2023","1133","player.muse","test_groupVolume_namespace","","","","test_get_volume","
    Tests getVolume command

    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:08:53 GMT 2023","Fri Apr 21 20:08:54 GMT 2023","715","player.muse","test_groups_namespace","","","","test_createGroup_duplicated_playerId[device_filter0]","
    Verify that createGroup tests for duplicate entries in the playerId array and sends out an accurate error event.
    "
"passed","Fri Apr 21 20:15:17 GMT 2023","Fri Apr 21 20:15:25 GMT 2023","8314","player.muse","test_saved_groups","","","","test_saved_groups_updateArea_updates_areaIds","
    Verify areaIds are updated on a group when a player in an existing area is updated to be removed from the area
    based on thr areaIds filtering rules that update areaIds associated with valid  players
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"skipped","Fri Apr 21 20:04:12 GMT 2023","Fri Apr 21 20:04:12 GMT 2023","72","player.muse","test_groups_namespace","","","","test_capability_from_response_on_supported_devices[device_filter1-unsupported_devices1-AIRPLAY]","
    Test getGroups response from supported_device and verify it
    - advertises CAPABILITY on supported_zp
    - does not advertise CAPABILITY on unsupported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param capability:
    :param unsupported_devices:
    :return:
    "
"passed","Fri Apr 21 20:13:28 GMT 2023","Fri Apr 21 20:13:40 GMT 2023","11777","player.muse","test_saved_groups","","","","test_saved_groups_union_of_playerIds_and_areaIds_group_coordinator_delegation","
    Verify setGroupMembers call with non-empty playerIds and areaIds modifies/creates the group
    by delegating the group coordinator and updates the playerIds and areaIds for the targeted group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:11:34 GMT 2023","Fri Apr 21 20:11:44 GMT 2023","10257","player.muse","test_saved_groups","","","","test_saved_groups_union_of_areaIds_group_member_addition","
    Verify createGroup and setGroupMembers call with empty playerIds and non-empty areaIds modifies/creates the group
    by adding the group member and updates the playerIds and areaIds for the targeted group
    and does not interfere with other groups in the HH
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:03:53 GMT 2023","Fri Apr 21 20:03:54 GMT 2023","1030","player.muse","test_groups_namespace","","","","test_getGroups_includeDeviceInfo_as_query_param[device_filter0]","
    SWPBL-129657
    Verify ""includeDeviceInfo"" works as a query param
    :param function_dut:
    :return:
    "
"passed","Fri Apr 21 20:03:38 GMT 2023","Fri Apr 21 20:03:40 GMT 2023","2282","player.muse","test_groupVolume_namespace","","","","test_set_relative_volume_clamp_min","
    This test uses a volumeDelta that is currently out of range to verify
    the player clamps audio at 0.

    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:03:31 GMT 2023","Fri Apr 21 20:03:33 GMT 2023","2233","player.muse","test_groupVolume_namespace","","","","test_set_relative_volume_clamp_max","
    This test uses a volumeDelta that is currently out of range to verify
    the player clamps audio at 100.

    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:04:03 GMT 2023","Fri Apr 21 20:04:05 GMT 2023","2105","player.muse","test_groups_namespace","","","","test_creating_groups_with_invalid_playerIds_failure_v2[device_filter0]","
    Test to verify grouping cmds with invalid playerIds return INVALID_PARAM error along with
    invalid playerIds in playerIds array with type playerSetError
    :param ws_client:
    :param function_dut:
    :return:
    "
"skipped","Fri Apr 21 20:08:59 GMT 2023","Fri Apr 21 20:08:59 GMT 2023","70","player.muse","test_saved_groups","","","","test_saved_groups_max_areas_delegation","
    Verify max areas can be delegated from GC to GM in a group when GC is removed
    :param module_dut:
    :param groups_in_hh:
    :param ws_client:
    :param dut_manager:
    :param websocket_manager:
    :return:
    "
"passed","Fri Apr 21 20:05:35 GMT 2023","Fri Apr 21 20:05:43 GMT 2023","8718","player.muse","test_groups_namespace","","","","test_playback_state_using_join_group_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using join group and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:06:33 GMT 2023","Fri Apr 21 20:06:41 GMT 2023","8464","player.muse","test_groups_namespace","","","","test_playback_state_using_createGroup_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using createGroup and
    group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:06:00 GMT 2023","Fri Apr 21 20:06:13 GMT 2023","13112","player.muse","test_groups_namespace","","","","test_playback_state_using_modifyGroup_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using modifyGroup and
    group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:04:55 GMT 2023","Fri Apr 21 20:05:05 GMT 2023","9894","player.muse","test_groups_namespace","","","","test_playback_state_using_createGroup_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using createGroup and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:05:15 GMT 2023","Fri Apr 21 20:05:24 GMT 2023","8831","player.muse","test_groups_namespace","","","","test_playback_state_using_setGroup_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using setGroup and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:10:31 GMT 2023","Fri Apr 21 20:10:45 GMT 2023","13745","player.muse","test_saved_groups","","","","test_source_areas_ids_version_changed_when_remote_zps_source_area_ids_is_changed","
    Test to verify SourceAreaUpdateID changes and doesn't change on ZP2 when
    module_dut's SourceAreasUpdateID (remote ZP) is updated and not updated
    :param dut_manager:
    :param module_dut:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:12:10 GMT 2023","Fri Apr 21 20:12:25 GMT 2023","15180","player.muse","test_saved_groups","","","","test_saved_groups_union_of_areaIds_group_coordinator_delegation","
    Verify createGroup and setGroupMembers call with empty playerIds and non-empty areaIds modifies/creates the group
    by delegating the group coordinator and updates the playerIds and areaIds for the targeted group
    and does not interfere with other groups in the HH
    :param module_dut:
    :param setup_teardown_two_zps:
    :param ws_client:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:04:35 GMT 2023","Fri Apr 21 20:04:44 GMT 2023","8985","player.muse","test_groups_namespace","","","","test_playback_state_using_modifyGroup_and_remove_GM[device_filter0-False]","
    Verify playback state from getGroups response when group is created using modifyGroup and group member is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param groups_in_hh:
    :return:
    "
"skipped","Fri Apr 21 20:04:18 GMT 2023","Fri Apr 21 20:04:18 GMT 2023","0","player.muse","test_groups_namespace","","","","test_capability_from_response_on_unsupported_devices[device_filter1-supported_devices1-AIRPLAY]","
    Test getGroups response from unsupported_device and verify it
    - does not advertise CAPABILITY on unsupported_zp
    - advertises CAPABILITY on supported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param supported_devices:
    :param capability:
    :return:
    "
"passed","Fri Apr 21 20:12:48 GMT 2023","Fri Apr 21 20:13:04 GMT 2023","16409","player.muse","test_saved_groups","","","","test_saved_groups_union_of_playerIds_and_areaIds_group_member_modification","
    Verify createGroup and setGroupMembers call with non-empty playerIds and areaIds modifies/creates the group
    by adding/removing the group member and updates the playerIds and areaIds for the targeted group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:06:59 GMT 2023","Fri Apr 21 20:07:08 GMT 2023","8372","player.muse","test_groups_namespace","","","","test_playback_state_using_setGroup_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using setGroup and group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"skipped","Fri Apr 21 20:08:51 GMT 2023","Fri Apr 21 20:08:51 GMT 2023","0","player.muse","test_groups_namespace","","","","test_getGroups_failure_post_grouping[device_filter1-gm]","
    Verifies that a createGroup call will fail POST grouping with inconsistent topology. Puts both a GC and a GM in an
    inconsistent state by overriding the groupID which makes the topology consistency check mark it as invalid.
    SWPBL-130705
    :param websocket_manager:
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param group_makeup:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:14:02 GMT 2023","Fri Apr 21 20:14:21 GMT 2023","19032","player.muse","test_saved_groups","","","","test_saved_groups_inactive_players","
    Verify grouping using areaIds works as expected when a player is in an inactive state and
    areaIds filtering rules don't add areaId associated with a valid but inactive player
    by delegating the group coordinator and updates the playerIds and areaIds for the targeted group
    :param module_dut:
    :param setup_teardown_two_zps:
    :param groups_in_hh:
    :param ws_client:
    :return:
    "
"passed","Fri Apr 21 20:02:58 GMT 2023","Fri Apr 21 20:03:12 GMT 2023","14677","player.muse","test_groupVolume_namespace","","","","test_verify_groupVolume_reports_correct_volume_level_after_reboot","
    SWPBL-63287
    Verify that after a reboot, groupVolume events report the correct volume level,
    whatever that level was set before the reboot

    :param ws_client:
    :return:
    "
"skipped","Fri Apr 21 20:08:51 GMT 2023","Fri Apr 21 20:08:51 GMT 2023","1","player.muse","test_groups_namespace","","","","test_getGroups_failure_post_grouping[device_filter0-gc]","
    Verifies that a createGroup call will fail POST grouping with inconsistent topology. Puts both a GC and a GM in an
    inconsistent state by overriding the groupID which makes the topology consistency check mark it as invalid.
    SWPBL-130705
    :param websocket_manager:
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param device_filter:
    :param group_makeup:
    :param groups_in_hh:
    :return:
    "
"passed","Fri Apr 21 20:07:22 GMT 2023","Fri Apr 21 20:07:30 GMT 2023","7563","player.muse","test_groups_namespace","","","","test_playback_state_using_join_group_and_remove_GC[device_filter0-False]","
    Verify playback state from getGroups response when group is created using join group and
    group coordinator is removed
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param start_CQ_playback_on_different_zp:
    :param groups_in_hh:
    :return:
    "
"skipped","Fri Apr 21 20:08:07 GMT 2023","Fri Apr 21 20:08:08 GMT 2023","1294","player.muse","test_groups_namespace","","","","test_grouping_correlation_id[PLAYBACK_DEVICES]","
    Verifies events generated from createGroup and modifyGroupMembers commands honor a passed in corrId and populate their
    corrId as the corrParentId on the generated events
    original corrId --> museCommandHandler corrParentId
    museCommandHandler corrId --> corrParentId generated events
    :param dut_manager:
    :param function_dut:
    :param mock_cq_control:
    :param ws_client:
    :param device_filter:
    :return:
    "
"passed","Fri Apr 21 20:03:44 GMT 2023","Fri Apr 21 20:03:46 GMT 2023","1105","player.muse","test_groupVolume_namespace","","","","test_set_mute","
    Tests setMute command

    :param ws_client:
    :return:
    "
"skipped","Fri Apr 21 20:04:13 GMT 2023","Fri Apr 21 20:04:13 GMT 2023","0","player.muse","test_groups_namespace","","","","test_capability_from_response_on_supported_devices[device_filter2-unsupported_devices2-FIXED_VOLUME]","
    Test getGroups response from supported_device and verify it
    - advertises CAPABILITY on supported_zp
    - does not advertise CAPABILITY on unsupported_zp
    :param dut_manager:
    :param function_dut:
    :param ws_client:
    :param capability:
    :param unsupported_devices:
    :return:
    "
